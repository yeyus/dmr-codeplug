// Code generated by protoc-gen-go.
// source: proto/tytera/tytera.proto
// DO NOT EDIT!

/*
Package tytera is a generated protocol buffer package.

It is generated from these files:
	proto/tytera/tytera.proto

It has these top-level messages:
	TyteraCodeplug
	BasicInformation
	GeneralSettings
	MenuItems
	ContactsMenu
	CallLogMenu
	ScanMenu
	UtilitiesMenu
	OneTouchAccessEntry
	ButtonDefinitions
	MessagePresets
	PrivacySettings
	EmergencySystemEntry
	EmergencySystems
	ContactEntry
	Contacts
	RxGroupEntry
	RxGroups
	ZoneEntry
	Zones
	ScanListEntry
	ScanLists
	Tone
	ChannelEntry
	Channels
	DTMFSystemEntry
	DTMFDecodeEntry
	DTMFSettings
	GPSSystemEntry
	GPSSystems
*/
package tytera

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RadioBand int32

const (
	RadioBand_VHF_136_174 RadioBand = 0
	RadioBand_UHF_350_400 RadioBand = 1
	RadioBand_UHF_400_480 RadioBand = 2
	RadioBand_UHF_450_520 RadioBand = 3
	RadioBand_DISABLED    RadioBand = 255
)

var RadioBand_name = map[int32]string{
	0:   "VHF_136_174",
	1:   "UHF_350_400",
	2:   "UHF_400_480",
	3:   "UHF_450_520",
	255: "DISABLED",
}
var RadioBand_value = map[string]int32{
	"VHF_136_174": 0,
	"UHF_350_400": 1,
	"UHF_400_480": 2,
	"UHF_450_520": 3,
	"DISABLED":    255,
}

func (x RadioBand) String() string {
	return proto.EnumName(RadioBand_name, int32(x))
}
func (RadioBand) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MonitorType int32

const (
	MonitorType_SILENT       MonitorType = 0
	MonitorType_OPEN_SQUELCH MonitorType = 1
)

var MonitorType_name = map[int32]string{
	0: "SILENT",
	1: "OPEN_SQUELCH",
}
var MonitorType_value = map[string]int32{
	"SILENT":       0,
	"OPEN_SQUELCH": 1,
}

func (x MonitorType) String() string {
	return proto.EnumName(MonitorType_name, int32(x))
}
func (MonitorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SystemType int32

const (
	SystemType_NONE    SystemType = 0
	SystemType_DIGITAL SystemType = 1
	SystemType_ANALOG  SystemType = 2
	SystemType_BOTH    SystemType = 3
)

var SystemType_name = map[int32]string{
	0: "NONE",
	1: "DIGITAL",
	2: "ANALOG",
	3: "BOTH",
}
var SystemType_value = map[string]int32{
	"NONE":    0,
	"DIGITAL": 1,
	"ANALOG":  2,
	"BOTH":    3,
}

func (x SystemType) String() string {
	return proto.EnumName(SystemType_name, int32(x))
}
func (SystemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type IntroScreenMode int32

const (
	IntroScreenMode_CHAR_STRING IntroScreenMode = 0
	IntroScreenMode_PICTURE     IntroScreenMode = 1
)

var IntroScreenMode_name = map[int32]string{
	0: "CHAR_STRING",
	1: "PICTURE",
}
var IntroScreenMode_value = map[string]int32{
	"CHAR_STRING": 0,
	"PICTURE":     1,
}

func (x IntroScreenMode) String() string {
	return proto.EnumName(IntroScreenMode_name, int32(x))
}
func (IntroScreenMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type OperationMode int32

const (
	OperationMode_MR      OperationMode = 0
	OperationMode_CHANNEL OperationMode = 255
)

var OperationMode_name = map[int32]string{
	0:   "MR",
	255: "CHANNEL",
}
var OperationMode_value = map[string]int32{
	"MR":      0,
	"CHANNEL": 255,
}

func (x OperationMode) String() string {
	return proto.EnumName(OperationMode_name, int32(x))
}
func (OperationMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ButtonFunction int32

const (
	ButtonFunction_UNASSIGNED            ButtonFunction = 0
	ButtonFunction_ALL_ALERT_TONES_ONOFF ButtonFunction = 1
	ButtonFunction_EMERGENCY_ON          ButtonFunction = 2
	ButtonFunction_EMERGENCY_OFF         ButtonFunction = 3
	ButtonFunction_HIGH_LOW_POWER        ButtonFunction = 4
	ButtonFunction_MONITOR               ButtonFunction = 5
	ButtonFunction_NUISANCE_DELETE       ButtonFunction = 6
	ButtonFunction_ONE_TOUCH_ACCESS_1    ButtonFunction = 7
	ButtonFunction_ONE_TOUCH_ACCESS_2    ButtonFunction = 8
	ButtonFunction_ONE_TOUCH_ACCESS_3    ButtonFunction = 9
	ButtonFunction_ONE_TOUCH_ACCESS_4    ButtonFunction = 10
	ButtonFunction_ONE_TOUCH_ACCESS_5    ButtonFunction = 11
	ButtonFunction_ONE_TOUCH_ACCESS_6    ButtonFunction = 12
	ButtonFunction_REPEATER_TALKAROUND   ButtonFunction = 13
	ButtonFunction_SCAN_ONOFF            ButtonFunction = 14
	ButtonFunction_TIGHT_NORMAL_SQUELCH  ButtonFunction = 21
	ButtonFunction_PRIVACY_ONOFF         ButtonFunction = 22
	ButtonFunction_VOX_ONOFF             ButtonFunction = 23
	ButtonFunction_ZONE_TOGGLE           ButtonFunction = 25
	ButtonFunction_BATTERY_INDICATOR     ButtonFunction = 26
	ButtonFunction_MANUAL_DIAL           ButtonFunction = 30
	ButtonFunction_LONE_WORK_ONOFF       ButtonFunction = 31
	ButtonFunction_TONE_1750HZ           ButtonFunction = 38
)

var ButtonFunction_name = map[int32]string{
	0:  "UNASSIGNED",
	1:  "ALL_ALERT_TONES_ONOFF",
	2:  "EMERGENCY_ON",
	3:  "EMERGENCY_OFF",
	4:  "HIGH_LOW_POWER",
	5:  "MONITOR",
	6:  "NUISANCE_DELETE",
	7:  "ONE_TOUCH_ACCESS_1",
	8:  "ONE_TOUCH_ACCESS_2",
	9:  "ONE_TOUCH_ACCESS_3",
	10: "ONE_TOUCH_ACCESS_4",
	11: "ONE_TOUCH_ACCESS_5",
	12: "ONE_TOUCH_ACCESS_6",
	13: "REPEATER_TALKAROUND",
	14: "SCAN_ONOFF",
	21: "TIGHT_NORMAL_SQUELCH",
	22: "PRIVACY_ONOFF",
	23: "VOX_ONOFF",
	25: "ZONE_TOGGLE",
	26: "BATTERY_INDICATOR",
	30: "MANUAL_DIAL",
	31: "LONE_WORK_ONOFF",
	38: "TONE_1750HZ",
}
var ButtonFunction_value = map[string]int32{
	"UNASSIGNED":            0,
	"ALL_ALERT_TONES_ONOFF": 1,
	"EMERGENCY_ON":          2,
	"EMERGENCY_OFF":         3,
	"HIGH_LOW_POWER":        4,
	"MONITOR":               5,
	"NUISANCE_DELETE":       6,
	"ONE_TOUCH_ACCESS_1":    7,
	"ONE_TOUCH_ACCESS_2":    8,
	"ONE_TOUCH_ACCESS_3":    9,
	"ONE_TOUCH_ACCESS_4":    10,
	"ONE_TOUCH_ACCESS_5":    11,
	"ONE_TOUCH_ACCESS_6":    12,
	"REPEATER_TALKAROUND":   13,
	"SCAN_ONOFF":            14,
	"TIGHT_NORMAL_SQUELCH":  21,
	"PRIVACY_ONOFF":         22,
	"VOX_ONOFF":             23,
	"ZONE_TOGGLE":           25,
	"BATTERY_INDICATOR":     26,
	"MANUAL_DIAL":           30,
	"LONE_WORK_ONOFF":       31,
	"TONE_1750HZ":           38,
}

func (x ButtonFunction) String() string {
	return proto.EnumName(ButtonFunction_name, int32(x))
}
func (ButtonFunction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type OneTouchCallType int32

const (
	// Mode = none
	OneTouchCallType_NO_CALL_TYPE OneTouchCallType = 0
	// Mode = analog
	OneTouchCallType_DTMF1 OneTouchCallType = 1
	OneTouchCallType_DTMF2 OneTouchCallType = 2
	OneTouchCallType_DTMF3 OneTouchCallType = 3
	OneTouchCallType_DTMF4 OneTouchCallType = 4
	// Mode = digital
	OneTouchCallType_CALL         OneTouchCallType = 101
	OneTouchCallType_TEXT_MESSAGE OneTouchCallType = 102
)

var OneTouchCallType_name = map[int32]string{
	0:   "NO_CALL_TYPE",
	1:   "DTMF1",
	2:   "DTMF2",
	3:   "DTMF3",
	4:   "DTMF4",
	101: "CALL",
	102: "TEXT_MESSAGE",
}
var OneTouchCallType_value = map[string]int32{
	"NO_CALL_TYPE": 0,
	"DTMF1":        1,
	"DTMF2":        2,
	"DTMF3":        3,
	"DTMF4":        4,
	"CALL":         101,
	"TEXT_MESSAGE": 102,
}

func (x OneTouchCallType) String() string {
	return proto.EnumName(OneTouchCallType_name, int32(x))
}
func (OneTouchCallType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

//
// ------------------
// Emergency Systems
// ------------------
// https://github.com/yeyus/md380-webtools/wiki/MD389---Digit-Emergency-System
type AlarmType int32

const (
	AlarmType_DISABLED_TYPE          AlarmType = 0
	AlarmType_REGULAR_TYPE           AlarmType = 1
	AlarmType_SILENT_TYPE            AlarmType = 2
	AlarmType_SILENT_WITH_VOICE_TYPE AlarmType = 3
)

var AlarmType_name = map[int32]string{
	0: "DISABLED_TYPE",
	1: "REGULAR_TYPE",
	2: "SILENT_TYPE",
	3: "SILENT_WITH_VOICE_TYPE",
}
var AlarmType_value = map[string]int32{
	"DISABLED_TYPE":          0,
	"REGULAR_TYPE":           1,
	"SILENT_TYPE":            2,
	"SILENT_WITH_VOICE_TYPE": 3,
}

func (x AlarmType) String() string {
	return proto.EnumName(AlarmType_name, int32(x))
}
func (AlarmType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type AlarmMode int32

const (
	AlarmMode_EMERGENCY_ALARM                      AlarmMode = 0
	AlarmMode_EMERGENCY_ALARM_WITH_CALL            AlarmMode = 1
	AlarmMode_EMERGENCY_ALARM_WITH_VOICE_TO_FOLLOW AlarmMode = 2
)

var AlarmMode_name = map[int32]string{
	0: "EMERGENCY_ALARM",
	1: "EMERGENCY_ALARM_WITH_CALL",
	2: "EMERGENCY_ALARM_WITH_VOICE_TO_FOLLOW",
}
var AlarmMode_value = map[string]int32{
	"EMERGENCY_ALARM":                      0,
	"EMERGENCY_ALARM_WITH_CALL":            1,
	"EMERGENCY_ALARM_WITH_VOICE_TO_FOLLOW": 2,
}

func (x AlarmMode) String() string {
	return proto.EnumName(AlarmMode_name, int32(x))
}
func (AlarmMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

//
// ------------------
// Contacts
// ------------------
// https://github.com/yeyus/md380-webtools/wiki/MD389---Digital-Contact
type CallType int32

const (
	CallType_CALL_TYPE_NOT_SET CallType = 0
	CallType_GROUP_CALL        CallType = 1
	CallType_PRIVATE_CALL      CallType = 2
	CallType_ALL_CALL          CallType = 3
)

var CallType_name = map[int32]string{
	0: "CALL_TYPE_NOT_SET",
	1: "GROUP_CALL",
	2: "PRIVATE_CALL",
	3: "ALL_CALL",
}
var CallType_value = map[string]int32{
	"CALL_TYPE_NOT_SET": 0,
	"GROUP_CALL":        1,
	"PRIVATE_CALL":      2,
	"ALL_CALL":          3,
}

func (x CallType) String() string {
	return proto.EnumName(CallType_name, int32(x))
}
func (CallType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ChannelMode int32

const (
	ChannelMode_UNSET_CHANNEL   ChannelMode = 0
	ChannelMode_ANALOG_CHANNEL  ChannelMode = 1
	ChannelMode_DIGITAL_CHANNEL ChannelMode = 2
)

var ChannelMode_name = map[int32]string{
	0: "UNSET_CHANNEL",
	1: "ANALOG_CHANNEL",
	2: "DIGITAL_CHANNEL",
}
var ChannelMode_value = map[string]int32{
	"UNSET_CHANNEL":   0,
	"ANALOG_CHANNEL":  1,
	"DIGITAL_CHANNEL": 2,
}

func (x ChannelMode) String() string {
	return proto.EnumName(ChannelMode_name, int32(x))
}
func (ChannelMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Bandwidth int32

const (
	Bandwidth_NARROW Bandwidth = 0
	Bandwidth_WIDE   Bandwidth = 1
)

var Bandwidth_name = map[int32]string{
	0: "NARROW",
	1: "WIDE",
}
var Bandwidth_value = map[string]int32{
	"NARROW": 0,
	"WIDE":   1,
}

func (x Bandwidth) String() string {
	return proto.EnumName(Bandwidth_name, int32(x))
}
func (Bandwidth) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Squelch int32

const (
	Squelch_TIGHT  Squelch = 0
	Squelch_NORMAL Squelch = 1
)

var Squelch_name = map[int32]string{
	0: "TIGHT",
	1: "NORMAL",
}
var Squelch_value = map[string]int32{
	"TIGHT":  0,
	"NORMAL": 1,
}

func (x Squelch) String() string {
	return proto.EnumName(Squelch_name, int32(x))
}
func (Squelch) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Slot int32

const (
	Slot_SLOT_INVALID Slot = 0
	Slot_SLOT1        Slot = 1
	Slot_SLOT2        Slot = 2
	Slot_SLOT_NOT_SET Slot = 3
)

var Slot_name = map[int32]string{
	0: "SLOT_INVALID",
	1: "SLOT1",
	2: "SLOT2",
	3: "SLOT_NOT_SET",
}
var Slot_value = map[string]int32{
	"SLOT_INVALID": 0,
	"SLOT1":        1,
	"SLOT2":        2,
	"SLOT_NOT_SET": 3,
}

func (x Slot) String() string {
	return proto.EnumName(Slot_name, int32(x))
}
func (Slot) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type CipherSystem int32

const (
	CipherSystem_UNSET_CIPHER    CipherSystem = 0
	CipherSystem_BASIC_CIPHER    CipherSystem = 1
	CipherSystem_ENHANCED_CIPHER CipherSystem = 2
)

var CipherSystem_name = map[int32]string{
	0: "UNSET_CIPHER",
	1: "BASIC_CIPHER",
	2: "ENHANCED_CIPHER",
}
var CipherSystem_value = map[string]int32{
	"UNSET_CIPHER":    0,
	"BASIC_CIPHER":    1,
	"ENHANCED_CIPHER": 2,
}

func (x CipherSystem) String() string {
	return proto.EnumName(CipherSystem_name, int32(x))
}
func (CipherSystem) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ReferenceFrequency int32

const (
	ReferenceFrequency_LOW_REFERENCE    ReferenceFrequency = 0
	ReferenceFrequency_MEDIUM_REFERENCE ReferenceFrequency = 1
	ReferenceFrequency_HIGH_REFERENCE   ReferenceFrequency = 2
)

var ReferenceFrequency_name = map[int32]string{
	0: "LOW_REFERENCE",
	1: "MEDIUM_REFERENCE",
	2: "HIGH_REFERENCE",
}
var ReferenceFrequency_value = map[string]int32{
	"LOW_REFERENCE":    0,
	"MEDIUM_REFERENCE": 1,
	"HIGH_REFERENCE":   2,
}

func (x ReferenceFrequency) String() string {
	return proto.EnumName(ReferenceFrequency_name, int32(x))
}
func (ReferenceFrequency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type PowerSetting int32

const (
	PowerSetting_LOW_POWER  PowerSetting = 0
	PowerSetting_HIGH_POWER PowerSetting = 1
)

var PowerSetting_name = map[int32]string{
	0: "LOW_POWER",
	1: "HIGH_POWER",
}
var PowerSetting_value = map[string]int32{
	"LOW_POWER":  0,
	"HIGH_POWER": 1,
}

func (x PowerSetting) String() string {
	return proto.EnumName(PowerSetting_name, int32(x))
}
func (PowerSetting) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type AdmitCriteria int32

const (
	AdmitCriteria_ADMIT_ALWAYS AdmitCriteria = 0
	AdmitCriteria_CHANNEL_FREE AdmitCriteria = 1
	AdmitCriteria_COLOR_CODE   AdmitCriteria = 2
)

var AdmitCriteria_name = map[int32]string{
	0: "ADMIT_ALWAYS",
	1: "CHANNEL_FREE",
	2: "COLOR_CODE",
}
var AdmitCriteria_value = map[string]int32{
	"ADMIT_ALWAYS": 0,
	"CHANNEL_FREE": 1,
	"COLOR_CODE":   2,
}

func (x AdmitCriteria) String() string {
	return proto.EnumName(AdmitCriteria_name, int32(x))
}
func (AdmitCriteria) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type SignalingSystem int32

const (
	SignalingSystem_NO_SIGNALING SignalingSystem = 0
	SignalingSystem_DTMF_1       SignalingSystem = 1
	SignalingSystem_DTMF_2       SignalingSystem = 2
	SignalingSystem_DTMF_3       SignalingSystem = 3
	SignalingSystem_DTMF_4       SignalingSystem = 4
)

var SignalingSystem_name = map[int32]string{
	0: "NO_SIGNALING",
	1: "DTMF_1",
	2: "DTMF_2",
	3: "DTMF_3",
	4: "DTMF_4",
}
var SignalingSystem_value = map[string]int32{
	"NO_SIGNALING": 0,
	"DTMF_1":       1,
	"DTMF_2":       2,
	"DTMF_3":       3,
	"DTMF_4":       4,
}

func (x SignalingSystem) String() string {
	return proto.EnumName(SignalingSystem_name, int32(x))
}
func (SignalingSystem) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type ToneSystem int32

const (
	ToneSystem_NO_TONE      ToneSystem = 0
	ToneSystem_CTCSS        ToneSystem = 1
	ToneSystem_DCS_NORMAL   ToneSystem = 2
	ToneSystem_DCS_INVERTED ToneSystem = 3
)

var ToneSystem_name = map[int32]string{
	0: "NO_TONE",
	1: "CTCSS",
	2: "DCS_NORMAL",
	3: "DCS_INVERTED",
}
var ToneSystem_value = map[string]int32{
	"NO_TONE":      0,
	"CTCSS":        1,
	"DCS_NORMAL":   2,
	"DCS_INVERTED": 3,
}

func (x ToneSystem) String() string {
	return proto.EnumName(ToneSystem_name, int32(x))
}
func (ToneSystem) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ResponseType int32

const (
	ResponseType_GENERAL ResponseType = 0
	ResponseType_KILL    ResponseType = 1
	ResponseType_STUN    ResponseType = 2
	ResponseType_ACTIVE  ResponseType = 3
	ResponseType_UNSTUN  ResponseType = 4
)

var ResponseType_name = map[int32]string{
	0: "GENERAL",
	1: "KILL",
	2: "STUN",
	3: "ACTIVE",
	4: "UNSTUN",
}
var ResponseType_value = map[string]int32{
	"GENERAL": 0,
	"KILL":    1,
	"STUN":    2,
	"ACTIVE":  3,
	"UNSTUN":  4,
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}
func (ResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type DecodeType int32

const (
	DecodeType_DECODE_TYPE_NONE DecodeType = 0
	DecodeType_SEL_CALL         DecodeType = 1
)

var DecodeType_name = map[int32]string{
	0: "DECODE_TYPE_NONE",
	1: "SEL_CALL",
}
var DecodeType_value = map[string]int32{
	"DECODE_TYPE_NONE": 0,
	"SEL_CALL":         1,
}

func (x DecodeType) String() string {
	return proto.EnumName(DecodeType_name, int32(x))
}
func (DecodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type PttIdType int32

const (
	PttIdType_NO_PTT_ID    PttIdType = 0
	PttIdType_PRE_ONLY     PttIdType = 1
	PttIdType_POST_ONLY    PttIdType = 2
	PttIdType_PRE_AND_POST PttIdType = 3
)

var PttIdType_name = map[int32]string{
	0: "NO_PTT_ID",
	1: "PRE_ONLY",
	2: "POST_ONLY",
	3: "PRE_AND_POST",
}
var PttIdType_value = map[string]int32{
	"NO_PTT_ID":    0,
	"PRE_ONLY":     1,
	"POST_ONLY":    2,
	"PRE_AND_POST": 3,
}

func (x PttIdType) String() string {
	return proto.EnumName(PttIdType_name, int32(x))
}
func (PttIdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type GroupCodeType int32

const (
	GroupCodeType_NO_GROUP_CODE GroupCodeType = 0
	GroupCodeType_A             GroupCodeType = 1
	GroupCodeType_B             GroupCodeType = 2
	GroupCodeType_C             GroupCodeType = 3
	GroupCodeType_D             GroupCodeType = 4
	GroupCodeType_STAR          GroupCodeType = 5
	GroupCodeType_HASH          GroupCodeType = 6
)

var GroupCodeType_name = map[int32]string{
	0: "NO_GROUP_CODE",
	1: "A",
	2: "B",
	3: "C",
	4: "D",
	5: "STAR",
	6: "HASH",
}
var GroupCodeType_value = map[string]int32{
	"NO_GROUP_CODE": 0,
	"A":             1,
	"B":             2,
	"C":             3,
	"D":             4,
	"STAR":          5,
	"HASH":          6,
}

func (x GroupCodeType) String() string {
	return proto.EnumName(GroupCodeType_name, int32(x))
}
func (GroupCodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

//
// ------------------
// Codeplug
// ------------------
type TyteraCodeplug struct {
	BasicInformation  *BasicInformation  `protobuf:"bytes,1,opt,name=basic_information,json=basicInformation" json:"basic_information,omitempty"`
	GeneralSettings   *GeneralSettings   `protobuf:"bytes,2,opt,name=general_settings,json=generalSettings" json:"general_settings,omitempty"`
	MenuItems         *MenuItems         `protobuf:"bytes,3,opt,name=menu_items,json=menuItems" json:"menu_items,omitempty"`
	ButtonDefinitions *ButtonDefinitions `protobuf:"bytes,4,opt,name=button_definitions,json=buttonDefinitions" json:"button_definitions,omitempty"`
	MessagePresets    *MessagePresets    `protobuf:"bytes,5,opt,name=message_presets,json=messagePresets" json:"message_presets,omitempty"`
	PrivacySettings   *PrivacySettings   `protobuf:"bytes,6,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings,omitempty"`
	EmergencySystems  *EmergencySystems  `protobuf:"bytes,7,opt,name=emergency_systems,json=emergencySystems" json:"emergency_systems,omitempty"`
	Contacts          *Contacts          `protobuf:"bytes,8,opt,name=contacts" json:"contacts,omitempty"`
	RxGroups          *RxGroups          `protobuf:"bytes,9,opt,name=rx_groups,json=rxGroups" json:"rx_groups,omitempty"`
	Zones             *Zones             `protobuf:"bytes,10,opt,name=zones" json:"zones,omitempty"`
	ScanLists         *ScanLists         `protobuf:"bytes,11,opt,name=scan_lists,json=scanLists" json:"scan_lists,omitempty"`
	Channels          *Channels          `protobuf:"bytes,12,opt,name=channels" json:"channels,omitempty"`
	Dtmf              *DTMFSettings      `protobuf:"bytes,13,opt,name=dtmf" json:"dtmf,omitempty"`
	Gps               *GPSSystems        `protobuf:"bytes,14,opt,name=gps" json:"gps,omitempty"`
}

func (m *TyteraCodeplug) Reset()                    { *m = TyteraCodeplug{} }
func (m *TyteraCodeplug) String() string            { return proto.CompactTextString(m) }
func (*TyteraCodeplug) ProtoMessage()               {}
func (*TyteraCodeplug) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TyteraCodeplug) GetBasicInformation() *BasicInformation {
	if m != nil {
		return m.BasicInformation
	}
	return nil
}

func (m *TyteraCodeplug) GetGeneralSettings() *GeneralSettings {
	if m != nil {
		return m.GeneralSettings
	}
	return nil
}

func (m *TyteraCodeplug) GetMenuItems() *MenuItems {
	if m != nil {
		return m.MenuItems
	}
	return nil
}

func (m *TyteraCodeplug) GetButtonDefinitions() *ButtonDefinitions {
	if m != nil {
		return m.ButtonDefinitions
	}
	return nil
}

func (m *TyteraCodeplug) GetMessagePresets() *MessagePresets {
	if m != nil {
		return m.MessagePresets
	}
	return nil
}

func (m *TyteraCodeplug) GetPrivacySettings() *PrivacySettings {
	if m != nil {
		return m.PrivacySettings
	}
	return nil
}

func (m *TyteraCodeplug) GetEmergencySystems() *EmergencySystems {
	if m != nil {
		return m.EmergencySystems
	}
	return nil
}

func (m *TyteraCodeplug) GetContacts() *Contacts {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *TyteraCodeplug) GetRxGroups() *RxGroups {
	if m != nil {
		return m.RxGroups
	}
	return nil
}

func (m *TyteraCodeplug) GetZones() *Zones {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *TyteraCodeplug) GetScanLists() *ScanLists {
	if m != nil {
		return m.ScanLists
	}
	return nil
}

func (m *TyteraCodeplug) GetChannels() *Channels {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *TyteraCodeplug) GetDtmf() *DTMFSettings {
	if m != nil {
		return m.Dtmf
	}
	return nil
}

func (m *TyteraCodeplug) GetGps() *GPSSystems {
	if m != nil {
		return m.Gps
	}
	return nil
}

//
// ------------------
// Basic Information
// ------------------
// https://github.com/yeyus/md380-webtools/wiki/MD389---Basic-Information
type BasicInformation struct {
	ModelName       string                     `protobuf:"bytes,1,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	RadioBands      []RadioBand                `protobuf:"varint,2,rep,packed,name=radio_bands,json=radioBands,enum=go.ea7jmf.codeplug.tytera.RadioBand" json:"radio_bands,omitempty"`
	HardwareVersion string                     `protobuf:"bytes,3,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	McuVersion      string                     `protobuf:"bytes,4,opt,name=mcu_version,json=mcuVersion" json:"mcu_version,omitempty"`
	DeviceId        string                     `protobuf:"bytes,5,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	LastProgramDate *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=last_program_date,json=lastProgramDate" json:"last_program_date,omitempty"`
	CpsVersion      string                     `protobuf:"bytes,7,opt,name=cps_version,json=cpsVersion" json:"cps_version,omitempty"`
}

func (m *BasicInformation) Reset()                    { *m = BasicInformation{} }
func (m *BasicInformation) String() string            { return proto.CompactTextString(m) }
func (*BasicInformation) ProtoMessage()               {}
func (*BasicInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BasicInformation) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *BasicInformation) GetRadioBands() []RadioBand {
	if m != nil {
		return m.RadioBands
	}
	return nil
}

func (m *BasicInformation) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *BasicInformation) GetMcuVersion() string {
	if m != nil {
		return m.McuVersion
	}
	return ""
}

func (m *BasicInformation) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *BasicInformation) GetLastProgramDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastProgramDate
	}
	return nil
}

func (m *BasicInformation) GetCpsVersion() string {
	if m != nil {
		return m.CpsVersion
	}
	return ""
}

type GeneralSettings struct {
	ScreenLines              []string        `protobuf:"bytes,1,rep,name=screen_lines,json=screenLines" json:"screen_lines,omitempty"`
	MonitorType              MonitorType     `protobuf:"varint,2,opt,name=monitor_type,json=monitorType,enum=go.ea7jmf.codeplug.tytera.MonitorType" json:"monitor_type,omitempty"`
	DisableLeds              bool            `protobuf:"varint,3,opt,name=disable_leds,json=disableLeds" json:"disable_leds,omitempty"`
	TalkPermitTone           SystemType      `protobuf:"varint,4,opt,name=talk_permit_tone,json=talkPermitTone,enum=go.ea7jmf.codeplug.tytera.SystemType" json:"talk_permit_tone,omitempty"`
	DisablePasswordAndLock   bool            `protobuf:"varint,5,opt,name=disable_password_and_lock,json=disablePasswordAndLock" json:"disable_password_and_lock,omitempty"`
	DisableChFreeTone        bool            `protobuf:"varint,6,opt,name=disable_ch_free_tone,json=disableChFreeTone" json:"disable_ch_free_tone,omitempty"`
	DisableTones             bool            `protobuf:"varint,7,opt,name=disable_tones,json=disableTones" json:"disable_tones,omitempty"`
	BatSaveReceiveMode       bool            `protobuf:"varint,8,opt,name=bat_save_receive_mode,json=batSaveReceiveMode" json:"bat_save_receive_mode,omitempty"`
	BatSavePreamble          bool            `protobuf:"varint,9,opt,name=bat_save_preamble,json=batSavePreamble" json:"bat_save_preamble,omitempty"`
	IntroScreenMode          IntroScreenMode `protobuf:"varint,10,opt,name=intro_screen_mode,json=introScreenMode,enum=go.ea7jmf.codeplug.tytera.IntroScreenMode" json:"intro_screen_mode,omitempty"`
	RadioId                  uint32          `protobuf:"varint,11,opt,name=radio_id,json=radioId" json:"radio_id,omitempty"`
	TxPreamble               uint32          `protobuf:"varint,12,opt,name=tx_preamble,json=txPreamble" json:"tx_preamble,omitempty"`
	GroupCallHang            uint32          `protobuf:"varint,13,opt,name=group_call_hang,json=groupCallHang" json:"group_call_hang,omitempty"`
	PrivateCallHang          uint32          `protobuf:"varint,14,opt,name=private_call_hang,json=privateCallHang" json:"private_call_hang,omitempty"`
	VoxSensitivity           uint32          `protobuf:"varint,15,opt,name=vox_sensitivity,json=voxSensitivity" json:"vox_sensitivity,omitempty"`
	RxLowBattery             uint32          `protobuf:"varint,16,opt,name=rx_low_battery,json=rxLowBattery" json:"rx_low_battery,omitempty"`
	CallAlertTone            uint32          `protobuf:"varint,17,opt,name=call_alert_tone,json=callAlertTone" json:"call_alert_tone,omitempty"`
	LoneWorkerResponse       uint32          `protobuf:"varint,18,opt,name=lone_worker_response,json=loneWorkerResponse" json:"lone_worker_response,omitempty"`
	LoneWorkerReminder       uint32          `protobuf:"varint,19,opt,name=lone_worker_reminder,json=loneWorkerReminder" json:"lone_worker_reminder,omitempty"`
	ScanDigitalHangTime      uint32          `protobuf:"varint,20,opt,name=scan_digital_hang_time,json=scanDigitalHangTime" json:"scan_digital_hang_time,omitempty"`
	ScanAnalogHangTime       uint32          `protobuf:"varint,21,opt,name=scan_analog_hang_time,json=scanAnalogHangTime" json:"scan_analog_hang_time,omitempty"`
	BacklightTimeout         uint32          `protobuf:"varint,28,opt,name=backlight_timeout,json=backlightTimeout" json:"backlight_timeout,omitempty"`
	KeypadLock               uint32          `protobuf:"varint,22,opt,name=keypad_lock,json=keypadLock" json:"keypad_lock,omitempty"`
	OperationMode            OperationMode   `protobuf:"varint,23,opt,name=operation_mode,json=operationMode,enum=go.ea7jmf.codeplug.tytera.OperationMode" json:"operation_mode,omitempty"`
	PowerOnPassword          uint32          `protobuf:"varint,24,opt,name=power_on_password,json=powerOnPassword" json:"power_on_password,omitempty"`
	RadioProgrammingPassword uint32          `protobuf:"varint,25,opt,name=radio_programming_password,json=radioProgrammingPassword" json:"radio_programming_password,omitempty"`
	PcProgrammingPassword    string          `protobuf:"bytes,26,opt,name=pc_programming_password,json=pcProgrammingPassword" json:"pc_programming_password,omitempty"`
	RadioName                string          `protobuf:"bytes,27,opt,name=radio_name,json=radioName" json:"radio_name,omitempty"`
}

func (m *GeneralSettings) Reset()                    { *m = GeneralSettings{} }
func (m *GeneralSettings) String() string            { return proto.CompactTextString(m) }
func (*GeneralSettings) ProtoMessage()               {}
func (*GeneralSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GeneralSettings) GetScreenLines() []string {
	if m != nil {
		return m.ScreenLines
	}
	return nil
}

func (m *GeneralSettings) GetMonitorType() MonitorType {
	if m != nil {
		return m.MonitorType
	}
	return MonitorType_SILENT
}

func (m *GeneralSettings) GetDisableLeds() bool {
	if m != nil {
		return m.DisableLeds
	}
	return false
}

func (m *GeneralSettings) GetTalkPermitTone() SystemType {
	if m != nil {
		return m.TalkPermitTone
	}
	return SystemType_NONE
}

func (m *GeneralSettings) GetDisablePasswordAndLock() bool {
	if m != nil {
		return m.DisablePasswordAndLock
	}
	return false
}

func (m *GeneralSettings) GetDisableChFreeTone() bool {
	if m != nil {
		return m.DisableChFreeTone
	}
	return false
}

func (m *GeneralSettings) GetDisableTones() bool {
	if m != nil {
		return m.DisableTones
	}
	return false
}

func (m *GeneralSettings) GetBatSaveReceiveMode() bool {
	if m != nil {
		return m.BatSaveReceiveMode
	}
	return false
}

func (m *GeneralSettings) GetBatSavePreamble() bool {
	if m != nil {
		return m.BatSavePreamble
	}
	return false
}

func (m *GeneralSettings) GetIntroScreenMode() IntroScreenMode {
	if m != nil {
		return m.IntroScreenMode
	}
	return IntroScreenMode_CHAR_STRING
}

func (m *GeneralSettings) GetRadioId() uint32 {
	if m != nil {
		return m.RadioId
	}
	return 0
}

func (m *GeneralSettings) GetTxPreamble() uint32 {
	if m != nil {
		return m.TxPreamble
	}
	return 0
}

func (m *GeneralSettings) GetGroupCallHang() uint32 {
	if m != nil {
		return m.GroupCallHang
	}
	return 0
}

func (m *GeneralSettings) GetPrivateCallHang() uint32 {
	if m != nil {
		return m.PrivateCallHang
	}
	return 0
}

func (m *GeneralSettings) GetVoxSensitivity() uint32 {
	if m != nil {
		return m.VoxSensitivity
	}
	return 0
}

func (m *GeneralSettings) GetRxLowBattery() uint32 {
	if m != nil {
		return m.RxLowBattery
	}
	return 0
}

func (m *GeneralSettings) GetCallAlertTone() uint32 {
	if m != nil {
		return m.CallAlertTone
	}
	return 0
}

func (m *GeneralSettings) GetLoneWorkerResponse() uint32 {
	if m != nil {
		return m.LoneWorkerResponse
	}
	return 0
}

func (m *GeneralSettings) GetLoneWorkerReminder() uint32 {
	if m != nil {
		return m.LoneWorkerReminder
	}
	return 0
}

func (m *GeneralSettings) GetScanDigitalHangTime() uint32 {
	if m != nil {
		return m.ScanDigitalHangTime
	}
	return 0
}

func (m *GeneralSettings) GetScanAnalogHangTime() uint32 {
	if m != nil {
		return m.ScanAnalogHangTime
	}
	return 0
}

func (m *GeneralSettings) GetBacklightTimeout() uint32 {
	if m != nil {
		return m.BacklightTimeout
	}
	return 0
}

func (m *GeneralSettings) GetKeypadLock() uint32 {
	if m != nil {
		return m.KeypadLock
	}
	return 0
}

func (m *GeneralSettings) GetOperationMode() OperationMode {
	if m != nil {
		return m.OperationMode
	}
	return OperationMode_MR
}

func (m *GeneralSettings) GetPowerOnPassword() uint32 {
	if m != nil {
		return m.PowerOnPassword
	}
	return 0
}

func (m *GeneralSettings) GetRadioProgrammingPassword() uint32 {
	if m != nil {
		return m.RadioProgrammingPassword
	}
	return 0
}

func (m *GeneralSettings) GetPcProgrammingPassword() string {
	if m != nil {
		return m.PcProgrammingPassword
	}
	return ""
}

func (m *GeneralSettings) GetRadioName() string {
	if m != nil {
		return m.RadioName
	}
	return ""
}

type MenuItems struct {
	HangTime     uint32         `protobuf:"varint,1,opt,name=hang_time,json=hangTime" json:"hang_time,omitempty"`
	TextMessages bool           `protobuf:"varint,2,opt,name=text_messages,json=textMessages" json:"text_messages,omitempty"`
	Contacts     *ContactsMenu  `protobuf:"bytes,3,opt,name=contacts" json:"contacts,omitempty"`
	CallLog      *CallLogMenu   `protobuf:"bytes,4,opt,name=call_log,json=callLog" json:"call_log,omitempty"`
	Scan         *ScanMenu      `protobuf:"bytes,5,opt,name=scan" json:"scan,omitempty"`
	Utilities    *UtilitiesMenu `protobuf:"bytes,6,opt,name=utilities" json:"utilities,omitempty"`
}

func (m *MenuItems) Reset()                    { *m = MenuItems{} }
func (m *MenuItems) String() string            { return proto.CompactTextString(m) }
func (*MenuItems) ProtoMessage()               {}
func (*MenuItems) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MenuItems) GetHangTime() uint32 {
	if m != nil {
		return m.HangTime
	}
	return 0
}

func (m *MenuItems) GetTextMessages() bool {
	if m != nil {
		return m.TextMessages
	}
	return false
}

func (m *MenuItems) GetContacts() *ContactsMenu {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *MenuItems) GetCallLog() *CallLogMenu {
	if m != nil {
		return m.CallLog
	}
	return nil
}

func (m *MenuItems) GetScan() *ScanMenu {
	if m != nil {
		return m.Scan
	}
	return nil
}

func (m *MenuItems) GetUtilities() *UtilitiesMenu {
	if m != nil {
		return m.Utilities
	}
	return nil
}

type ContactsMenu struct {
	RadioDisable  bool `protobuf:"varint,1,opt,name=radio_disable,json=radioDisable" json:"radio_disable,omitempty"`
	RadioEnable   bool `protobuf:"varint,2,opt,name=radio_enable,json=radioEnable" json:"radio_enable,omitempty"`
	RemoteMonitor bool `protobuf:"varint,3,opt,name=remote_monitor,json=remoteMonitor" json:"remote_monitor,omitempty"`
	RadioCheck    bool `protobuf:"varint,4,opt,name=radio_check,json=radioCheck" json:"radio_check,omitempty"`
	ManualDial    bool `protobuf:"varint,5,opt,name=manual_dial,json=manualDial" json:"manual_dial,omitempty"`
	Edit          bool `protobuf:"varint,6,opt,name=edit" json:"edit,omitempty"`
	CallAlert     bool `protobuf:"varint,7,opt,name=call_alert,json=callAlert" json:"call_alert,omitempty"`
	ProgramKey    bool `protobuf:"varint,8,opt,name=program_key,json=programKey" json:"program_key,omitempty"`
}

func (m *ContactsMenu) Reset()                    { *m = ContactsMenu{} }
func (m *ContactsMenu) String() string            { return proto.CompactTextString(m) }
func (*ContactsMenu) ProtoMessage()               {}
func (*ContactsMenu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ContactsMenu) GetRadioDisable() bool {
	if m != nil {
		return m.RadioDisable
	}
	return false
}

func (m *ContactsMenu) GetRadioEnable() bool {
	if m != nil {
		return m.RadioEnable
	}
	return false
}

func (m *ContactsMenu) GetRemoteMonitor() bool {
	if m != nil {
		return m.RemoteMonitor
	}
	return false
}

func (m *ContactsMenu) GetRadioCheck() bool {
	if m != nil {
		return m.RadioCheck
	}
	return false
}

func (m *ContactsMenu) GetManualDial() bool {
	if m != nil {
		return m.ManualDial
	}
	return false
}

func (m *ContactsMenu) GetEdit() bool {
	if m != nil {
		return m.Edit
	}
	return false
}

func (m *ContactsMenu) GetCallAlert() bool {
	if m != nil {
		return m.CallAlert
	}
	return false
}

func (m *ContactsMenu) GetProgramKey() bool {
	if m != nil {
		return m.ProgramKey
	}
	return false
}

type CallLogMenu struct {
	OutgoingRadio bool `protobuf:"varint,1,opt,name=outgoing_radio,json=outgoingRadio" json:"outgoing_radio,omitempty"`
	Answered      bool `protobuf:"varint,2,opt,name=answered" json:"answered,omitempty"`
	Missed        bool `protobuf:"varint,3,opt,name=missed" json:"missed,omitempty"`
}

func (m *CallLogMenu) Reset()                    { *m = CallLogMenu{} }
func (m *CallLogMenu) String() string            { return proto.CompactTextString(m) }
func (*CallLogMenu) ProtoMessage()               {}
func (*CallLogMenu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CallLogMenu) GetOutgoingRadio() bool {
	if m != nil {
		return m.OutgoingRadio
	}
	return false
}

func (m *CallLogMenu) GetAnswered() bool {
	if m != nil {
		return m.Answered
	}
	return false
}

func (m *CallLogMenu) GetMissed() bool {
	if m != nil {
		return m.Missed
	}
	return false
}

type ScanMenu struct {
	EditList bool `protobuf:"varint,1,opt,name=edit_list,json=editList" json:"edit_list,omitempty"`
	Scan     bool `protobuf:"varint,2,opt,name=scan" json:"scan,omitempty"`
}

func (m *ScanMenu) Reset()                    { *m = ScanMenu{} }
func (m *ScanMenu) String() string            { return proto.CompactTextString(m) }
func (*ScanMenu) ProtoMessage()               {}
func (*ScanMenu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ScanMenu) GetEditList() bool {
	if m != nil {
		return m.EditList
	}
	return false
}

func (m *ScanMenu) GetScan() bool {
	if m != nil {
		return m.Scan
	}
	return false
}

type UtilitiesMenu struct {
	ToneOrAlert     bool `protobuf:"varint,1,opt,name=tone_or_alert,json=toneOrAlert" json:"tone_or_alert,omitempty"`
	Talkaround      bool `protobuf:"varint,2,opt,name=talkaround" json:"talkaround,omitempty"`
	Vox             bool `protobuf:"varint,3,opt,name=vox" json:"vox,omitempty"`
	Squelch         bool `protobuf:"varint,4,opt,name=squelch" json:"squelch,omitempty"`
	LedIndicator    bool `protobuf:"varint,5,opt,name=led_indicator,json=ledIndicator" json:"led_indicator,omitempty"`
	KeyboardLock    bool `protobuf:"varint,6,opt,name=keyboard_lock,json=keyboardLock" json:"keyboard_lock,omitempty"`
	IntroScreen     bool `protobuf:"varint,7,opt,name=intro_screen,json=introScreen" json:"intro_screen,omitempty"`
	Backlight       bool `protobuf:"varint,8,opt,name=backlight" json:"backlight,omitempty"`
	Power           bool `protobuf:"varint,9,opt,name=power" json:"power,omitempty"`
	Gps             bool `protobuf:"varint,10,opt,name=gps" json:"gps,omitempty"`
	ProgramRadio    bool `protobuf:"varint,11,opt,name=program_radio,json=programRadio" json:"program_radio,omitempty"`
	DisplayMode     bool `protobuf:"varint,12,opt,name=display_mode,json=displayMode" json:"display_mode,omitempty"`
	PasswordAndLock bool `protobuf:"varint,13,opt,name=password_and_lock,json=passwordAndLock" json:"password_and_lock,omitempty"`
}

func (m *UtilitiesMenu) Reset()                    { *m = UtilitiesMenu{} }
func (m *UtilitiesMenu) String() string            { return proto.CompactTextString(m) }
func (*UtilitiesMenu) ProtoMessage()               {}
func (*UtilitiesMenu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UtilitiesMenu) GetToneOrAlert() bool {
	if m != nil {
		return m.ToneOrAlert
	}
	return false
}

func (m *UtilitiesMenu) GetTalkaround() bool {
	if m != nil {
		return m.Talkaround
	}
	return false
}

func (m *UtilitiesMenu) GetVox() bool {
	if m != nil {
		return m.Vox
	}
	return false
}

func (m *UtilitiesMenu) GetSquelch() bool {
	if m != nil {
		return m.Squelch
	}
	return false
}

func (m *UtilitiesMenu) GetLedIndicator() bool {
	if m != nil {
		return m.LedIndicator
	}
	return false
}

func (m *UtilitiesMenu) GetKeyboardLock() bool {
	if m != nil {
		return m.KeyboardLock
	}
	return false
}

func (m *UtilitiesMenu) GetIntroScreen() bool {
	if m != nil {
		return m.IntroScreen
	}
	return false
}

func (m *UtilitiesMenu) GetBacklight() bool {
	if m != nil {
		return m.Backlight
	}
	return false
}

func (m *UtilitiesMenu) GetPower() bool {
	if m != nil {
		return m.Power
	}
	return false
}

func (m *UtilitiesMenu) GetGps() bool {
	if m != nil {
		return m.Gps
	}
	return false
}

func (m *UtilitiesMenu) GetProgramRadio() bool {
	if m != nil {
		return m.ProgramRadio
	}
	return false
}

func (m *UtilitiesMenu) GetDisplayMode() bool {
	if m != nil {
		return m.DisplayMode
	}
	return false
}

func (m *UtilitiesMenu) GetPasswordAndLock() bool {
	if m != nil {
		return m.PasswordAndLock
	}
	return false
}

type OneTouchAccessEntry struct {
	Mode     SystemType       `protobuf:"varint,1,opt,name=mode,enum=go.ea7jmf.codeplug.tytera.SystemType" json:"mode,omitempty"`
	CallType OneTouchCallType `protobuf:"varint,2,opt,name=call_type,json=callType,enum=go.ea7jmf.codeplug.tytera.OneTouchCallType" json:"call_type,omitempty"`
	// only if Mode = digital
	MessagePreset uint32 `protobuf:"varint,3,opt,name=message_preset,json=messagePreset" json:"message_preset,omitempty"`
	ContactIndex  uint32 `protobuf:"varint,4,opt,name=contact_index,json=contactIndex" json:"contact_index,omitempty"`
	// only if Mode = analog
	DtmfEncodePreset uint32 `protobuf:"varint,5,opt,name=dtmf_encode_preset,json=dtmfEncodePreset" json:"dtmf_encode_preset,omitempty"`
}

func (m *OneTouchAccessEntry) Reset()                    { *m = OneTouchAccessEntry{} }
func (m *OneTouchAccessEntry) String() string            { return proto.CompactTextString(m) }
func (*OneTouchAccessEntry) ProtoMessage()               {}
func (*OneTouchAccessEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OneTouchAccessEntry) GetMode() SystemType {
	if m != nil {
		return m.Mode
	}
	return SystemType_NONE
}

func (m *OneTouchAccessEntry) GetCallType() OneTouchCallType {
	if m != nil {
		return m.CallType
	}
	return OneTouchCallType_NO_CALL_TYPE
}

func (m *OneTouchAccessEntry) GetMessagePreset() uint32 {
	if m != nil {
		return m.MessagePreset
	}
	return 0
}

func (m *OneTouchAccessEntry) GetContactIndex() uint32 {
	if m != nil {
		return m.ContactIndex
	}
	return 0
}

func (m *OneTouchAccessEntry) GetDtmfEncodePreset() uint32 {
	if m != nil {
		return m.DtmfEncodePreset
	}
	return 0
}

type ButtonDefinitions struct {
	LongPressDuration uint32         `protobuf:"varint,1,opt,name=long_press_duration,json=longPressDuration" json:"long_press_duration,omitempty"`
	SideShort_1       ButtonFunction `protobuf:"varint,2,opt,name=side_short_1,json=sideShort1,enum=go.ea7jmf.codeplug.tytera.ButtonFunction" json:"side_short_1,omitempty"`
	SideShort_2       ButtonFunction `protobuf:"varint,3,opt,name=side_short_2,json=sideShort2,enum=go.ea7jmf.codeplug.tytera.ButtonFunction" json:"side_short_2,omitempty"`
	SideLong_1        ButtonFunction `protobuf:"varint,4,opt,name=side_long_1,json=sideLong1,enum=go.ea7jmf.codeplug.tytera.ButtonFunction" json:"side_long_1,omitempty"`
	SideLong_2        ButtonFunction `protobuf:"varint,5,opt,name=side_long_2,json=sideLong2,enum=go.ea7jmf.codeplug.tytera.ButtonFunction" json:"side_long_2,omitempty"`
	// max of 6 entries
	OneTouchAccess []*OneTouchAccessEntry `protobuf:"bytes,6,rep,name=one_touch_access,json=oneTouchAccess" json:"one_touch_access,omitempty"`
	ContactKey_0   uint32                 `protobuf:"varint,100,opt,name=contact_key_0,json=contactKey0" json:"contact_key_0,omitempty"`
	ContactKey_1   uint32                 `protobuf:"varint,101,opt,name=contact_key_1,json=contactKey1" json:"contact_key_1,omitempty"`
	ContactKey_2   uint32                 `protobuf:"varint,102,opt,name=contact_key_2,json=contactKey2" json:"contact_key_2,omitempty"`
	ContactKey_3   uint32                 `protobuf:"varint,103,opt,name=contact_key_3,json=contactKey3" json:"contact_key_3,omitempty"`
	ContactKey_4   uint32                 `protobuf:"varint,104,opt,name=contact_key_4,json=contactKey4" json:"contact_key_4,omitempty"`
	ContactKey_5   uint32                 `protobuf:"varint,105,opt,name=contact_key_5,json=contactKey5" json:"contact_key_5,omitempty"`
	ContactKey_6   uint32                 `protobuf:"varint,106,opt,name=contact_key_6,json=contactKey6" json:"contact_key_6,omitempty"`
	ContactKey_7   uint32                 `protobuf:"varint,107,opt,name=contact_key_7,json=contactKey7" json:"contact_key_7,omitempty"`
	ContactKey_8   uint32                 `protobuf:"varint,108,opt,name=contact_key_8,json=contactKey8" json:"contact_key_8,omitempty"`
	ContactKey_9   uint32                 `protobuf:"varint,109,opt,name=contact_key_9,json=contactKey9" json:"contact_key_9,omitempty"`
}

func (m *ButtonDefinitions) Reset()                    { *m = ButtonDefinitions{} }
func (m *ButtonDefinitions) String() string            { return proto.CompactTextString(m) }
func (*ButtonDefinitions) ProtoMessage()               {}
func (*ButtonDefinitions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ButtonDefinitions) GetLongPressDuration() uint32 {
	if m != nil {
		return m.LongPressDuration
	}
	return 0
}

func (m *ButtonDefinitions) GetSideShort_1() ButtonFunction {
	if m != nil {
		return m.SideShort_1
	}
	return ButtonFunction_UNASSIGNED
}

func (m *ButtonDefinitions) GetSideShort_2() ButtonFunction {
	if m != nil {
		return m.SideShort_2
	}
	return ButtonFunction_UNASSIGNED
}

func (m *ButtonDefinitions) GetSideLong_1() ButtonFunction {
	if m != nil {
		return m.SideLong_1
	}
	return ButtonFunction_UNASSIGNED
}

func (m *ButtonDefinitions) GetSideLong_2() ButtonFunction {
	if m != nil {
		return m.SideLong_2
	}
	return ButtonFunction_UNASSIGNED
}

func (m *ButtonDefinitions) GetOneTouchAccess() []*OneTouchAccessEntry {
	if m != nil {
		return m.OneTouchAccess
	}
	return nil
}

func (m *ButtonDefinitions) GetContactKey_0() uint32 {
	if m != nil {
		return m.ContactKey_0
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_1() uint32 {
	if m != nil {
		return m.ContactKey_1
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_2() uint32 {
	if m != nil {
		return m.ContactKey_2
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_3() uint32 {
	if m != nil {
		return m.ContactKey_3
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_4() uint32 {
	if m != nil {
		return m.ContactKey_4
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_5() uint32 {
	if m != nil {
		return m.ContactKey_5
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_6() uint32 {
	if m != nil {
		return m.ContactKey_6
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_7() uint32 {
	if m != nil {
		return m.ContactKey_7
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_8() uint32 {
	if m != nil {
		return m.ContactKey_8
	}
	return 0
}

func (m *ButtonDefinitions) GetContactKey_9() uint32 {
	if m != nil {
		return m.ContactKey_9
	}
	return 0
}

//
// ------------------
// Message Presets
// ------------------
// https://github.com/yeyus/md380-webtools/wiki/MD389---Text-Messages
type MessagePresets struct {
	Messages []string `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *MessagePresets) Reset()                    { *m = MessagePresets{} }
func (m *MessagePresets) String() string            { return proto.CompactTextString(m) }
func (*MessagePresets) ProtoMessage()               {}
func (*MessagePresets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MessagePresets) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

//
// ------------------
// Privacy Settings
// ------------------
// https://github.com/yeyus/md380-webtools/wiki/MD389---Privacy-Settings
type PrivacySettings struct {
	BasicKeys    [][]byte `protobuf:"bytes,1,rep,name=basic_keys,json=basicKeys,proto3" json:"basic_keys,omitempty"`
	EnhancedKeys [][]byte `protobuf:"bytes,2,rep,name=enhanced_keys,json=enhancedKeys,proto3" json:"enhanced_keys,omitempty"`
}

func (m *PrivacySettings) Reset()                    { *m = PrivacySettings{} }
func (m *PrivacySettings) String() string            { return proto.CompactTextString(m) }
func (*PrivacySettings) ProtoMessage()               {}
func (*PrivacySettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PrivacySettings) GetBasicKeys() [][]byte {
	if m != nil {
		return m.BasicKeys
	}
	return nil
}

func (m *PrivacySettings) GetEnhancedKeys() [][]byte {
	if m != nil {
		return m.EnhancedKeys
	}
	return nil
}

type EmergencySystemEntry struct {
	SystemName      string    `protobuf:"bytes,1,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	RevertChannel   uint32    `protobuf:"varint,2,opt,name=revert_channel,json=revertChannel" json:"revert_channel,omitempty"`
	AlarmType       AlarmType `protobuf:"varint,3,opt,name=alarm_type,json=alarmType,enum=go.ea7jmf.codeplug.tytera.AlarmType" json:"alarm_type,omitempty"`
	AlarmMode       AlarmMode `protobuf:"varint,4,opt,name=alarm_mode,json=alarmMode,enum=go.ea7jmf.codeplug.tytera.AlarmMode" json:"alarm_mode,omitempty"`
	ImpoliteRetries uint32    `protobuf:"varint,5,opt,name=impolite_retries,json=impoliteRetries" json:"impolite_retries,omitempty"`
	PoliteRetries   uint32    `protobuf:"varint,6,opt,name=polite_retries,json=politeRetries" json:"polite_retries,omitempty"`
	HotMicDuration  uint32    `protobuf:"varint,7,opt,name=hot_mic_duration,json=hotMicDuration" json:"hot_mic_duration,omitempty"`
}

func (m *EmergencySystemEntry) Reset()                    { *m = EmergencySystemEntry{} }
func (m *EmergencySystemEntry) String() string            { return proto.CompactTextString(m) }
func (*EmergencySystemEntry) ProtoMessage()               {}
func (*EmergencySystemEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EmergencySystemEntry) GetSystemName() string {
	if m != nil {
		return m.SystemName
	}
	return ""
}

func (m *EmergencySystemEntry) GetRevertChannel() uint32 {
	if m != nil {
		return m.RevertChannel
	}
	return 0
}

func (m *EmergencySystemEntry) GetAlarmType() AlarmType {
	if m != nil {
		return m.AlarmType
	}
	return AlarmType_DISABLED_TYPE
}

func (m *EmergencySystemEntry) GetAlarmMode() AlarmMode {
	if m != nil {
		return m.AlarmMode
	}
	return AlarmMode_EMERGENCY_ALARM
}

func (m *EmergencySystemEntry) GetImpoliteRetries() uint32 {
	if m != nil {
		return m.ImpoliteRetries
	}
	return 0
}

func (m *EmergencySystemEntry) GetPoliteRetries() uint32 {
	if m != nil {
		return m.PoliteRetries
	}
	return 0
}

func (m *EmergencySystemEntry) GetHotMicDuration() uint32 {
	if m != nil {
		return m.HotMicDuration
	}
	return 0
}

type EmergencySystems struct {
	RadioDisableDecode           bool                    `protobuf:"varint,1,opt,name=radio_disable_decode,json=radioDisableDecode" json:"radio_disable_decode,omitempty"`
	RemoteMonitorDecode          bool                    `protobuf:"varint,2,opt,name=remote_monitor_decode,json=remoteMonitorDecode" json:"remote_monitor_decode,omitempty"`
	EmergencyRemoteMonitorDecode bool                    `protobuf:"varint,3,opt,name=emergency_remote_monitor_decode,json=emergencyRemoteMonitorDecode" json:"emergency_remote_monitor_decode,omitempty"`
	RemoteMonitorDuration        uint32                  `protobuf:"varint,4,opt,name=remote_monitor_duration,json=remoteMonitorDuration" json:"remote_monitor_duration,omitempty"`
	TxSyncWakeup                 uint32                  `protobuf:"varint,5,opt,name=tx_sync_wakeup,json=txSyncWakeup" json:"tx_sync_wakeup,omitempty"`
	TxWakeupMessageLimit         uint32                  `protobuf:"varint,6,opt,name=tx_wakeup_message_limit,json=txWakeupMessageLimit" json:"tx_wakeup_message_limit,omitempty"`
	Entries                      []*EmergencySystemEntry `protobuf:"bytes,7,rep,name=entries" json:"entries,omitempty"`
}

func (m *EmergencySystems) Reset()                    { *m = EmergencySystems{} }
func (m *EmergencySystems) String() string            { return proto.CompactTextString(m) }
func (*EmergencySystems) ProtoMessage()               {}
func (*EmergencySystems) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EmergencySystems) GetRadioDisableDecode() bool {
	if m != nil {
		return m.RadioDisableDecode
	}
	return false
}

func (m *EmergencySystems) GetRemoteMonitorDecode() bool {
	if m != nil {
		return m.RemoteMonitorDecode
	}
	return false
}

func (m *EmergencySystems) GetEmergencyRemoteMonitorDecode() bool {
	if m != nil {
		return m.EmergencyRemoteMonitorDecode
	}
	return false
}

func (m *EmergencySystems) GetRemoteMonitorDuration() uint32 {
	if m != nil {
		return m.RemoteMonitorDuration
	}
	return 0
}

func (m *EmergencySystems) GetTxSyncWakeup() uint32 {
	if m != nil {
		return m.TxSyncWakeup
	}
	return 0
}

func (m *EmergencySystems) GetTxWakeupMessageLimit() uint32 {
	if m != nil {
		return m.TxWakeupMessageLimit
	}
	return 0
}

func (m *EmergencySystems) GetEntries() []*EmergencySystemEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ContactEntry struct {
	Id              uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CallReceiveTone bool     `protobuf:"varint,3,opt,name=call_receive_tone,json=callReceiveTone" json:"call_receive_tone,omitempty"`
	CallType        CallType `protobuf:"varint,4,opt,name=call_type,json=callType,enum=go.ea7jmf.codeplug.tytera.CallType" json:"call_type,omitempty"`
}

func (m *ContactEntry) Reset()                    { *m = ContactEntry{} }
func (m *ContactEntry) String() string            { return proto.CompactTextString(m) }
func (*ContactEntry) ProtoMessage()               {}
func (*ContactEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ContactEntry) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ContactEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContactEntry) GetCallReceiveTone() bool {
	if m != nil {
		return m.CallReceiveTone
	}
	return false
}

func (m *ContactEntry) GetCallType() CallType {
	if m != nil {
		return m.CallType
	}
	return CallType_CALL_TYPE_NOT_SET
}

type Contacts struct {
	Entries []*ContactEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Contacts) Reset()                    { *m = Contacts{} }
func (m *Contacts) String() string            { return proto.CompactTextString(m) }
func (*Contacts) ProtoMessage()               {}
func (*Contacts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Contacts) GetEntries() []*ContactEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type RxGroupEntry struct {
	Name         string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContactIndex []uint32 `protobuf:"varint,2,rep,packed,name=contact_index,json=contactIndex" json:"contact_index,omitempty"`
}

func (m *RxGroupEntry) Reset()                    { *m = RxGroupEntry{} }
func (m *RxGroupEntry) String() string            { return proto.CompactTextString(m) }
func (*RxGroupEntry) ProtoMessage()               {}
func (*RxGroupEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RxGroupEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RxGroupEntry) GetContactIndex() []uint32 {
	if m != nil {
		return m.ContactIndex
	}
	return nil
}

type RxGroups struct {
	Entries []*RxGroupEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *RxGroups) Reset()                    { *m = RxGroups{} }
func (m *RxGroups) String() string            { return proto.CompactTextString(m) }
func (*RxGroups) ProtoMessage()               {}
func (*RxGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RxGroups) GetEntries() []*RxGroupEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ZoneEntry struct {
	Name         string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ChannelIndex []uint32 `protobuf:"varint,2,rep,packed,name=channel_index,json=channelIndex" json:"channel_index,omitempty"`
}

func (m *ZoneEntry) Reset()                    { *m = ZoneEntry{} }
func (m *ZoneEntry) String() string            { return proto.CompactTextString(m) }
func (*ZoneEntry) ProtoMessage()               {}
func (*ZoneEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ZoneEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZoneEntry) GetChannelIndex() []uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return nil
}

type Zones struct {
	Entries []*ZoneEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Zones) Reset()                    { *m = Zones{} }
func (m *Zones) String() string            { return proto.CompactTextString(m) }
func (*Zones) ProtoMessage()               {}
func (*Zones) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Zones) GetEntries() []*ZoneEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ScanListEntry struct {
	Name               string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PriorityChannel_1  uint32   `protobuf:"varint,2,opt,name=priority_channel_1,json=priorityChannel1" json:"priority_channel_1,omitempty"`
	PriorityChannel_2  uint32   `protobuf:"varint,3,opt,name=priority_channel_2,json=priorityChannel2" json:"priority_channel_2,omitempty"`
	TxChannel          uint32   `protobuf:"varint,4,opt,name=tx_channel,json=txChannel" json:"tx_channel,omitempty"`
	SignalHoldTime     uint32   `protobuf:"varint,5,opt,name=signal_hold_time,json=signalHoldTime" json:"signal_hold_time,omitempty"`
	PrioritySampleTime uint32   `protobuf:"varint,6,opt,name=priority_sample_time,json=prioritySampleTime" json:"priority_sample_time,omitempty"`
	ChannelIndex       []uint32 `protobuf:"varint,7,rep,packed,name=channel_index,json=channelIndex" json:"channel_index,omitempty"`
}

func (m *ScanListEntry) Reset()                    { *m = ScanListEntry{} }
func (m *ScanListEntry) String() string            { return proto.CompactTextString(m) }
func (*ScanListEntry) ProtoMessage()               {}
func (*ScanListEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ScanListEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScanListEntry) GetPriorityChannel_1() uint32 {
	if m != nil {
		return m.PriorityChannel_1
	}
	return 0
}

func (m *ScanListEntry) GetPriorityChannel_2() uint32 {
	if m != nil {
		return m.PriorityChannel_2
	}
	return 0
}

func (m *ScanListEntry) GetTxChannel() uint32 {
	if m != nil {
		return m.TxChannel
	}
	return 0
}

func (m *ScanListEntry) GetSignalHoldTime() uint32 {
	if m != nil {
		return m.SignalHoldTime
	}
	return 0
}

func (m *ScanListEntry) GetPrioritySampleTime() uint32 {
	if m != nil {
		return m.PrioritySampleTime
	}
	return 0
}

func (m *ScanListEntry) GetChannelIndex() []uint32 {
	if m != nil {
		return m.ChannelIndex
	}
	return nil
}

type ScanLists struct {
	Entries []*ScanListEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *ScanLists) Reset()                    { *m = ScanLists{} }
func (m *ScanLists) String() string            { return proto.CompactTextString(m) }
func (*ScanLists) ProtoMessage()               {}
func (*ScanLists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ScanLists) GetEntries() []*ScanListEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Tone struct {
	Type ToneSystem `protobuf:"varint,1,opt,name=type,enum=go.ea7jmf.codeplug.tytera.ToneSystem" json:"type,omitempty"`
	// only for CTCSS (analog), expressed in tenths of Hz
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// only for DCS (digital
	Code uint32 `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
}

func (m *Tone) Reset()                    { *m = Tone{} }
func (m *Tone) String() string            { return proto.CompactTextString(m) }
func (*Tone) ProtoMessage()               {}
func (*Tone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Tone) GetType() ToneSystem {
	if m != nil {
		return m.Type
	}
	return ToneSystem_NO_TONE
}

func (m *Tone) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Tone) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ChannelEntry struct {
	Mode                    ChannelMode        `protobuf:"varint,1,opt,name=mode,enum=go.ea7jmf.codeplug.tytera.ChannelMode" json:"mode,omitempty"`
	Bandwidth               Bandwidth          `protobuf:"varint,2,opt,name=bandwidth,enum=go.ea7jmf.codeplug.tytera.Bandwidth" json:"bandwidth,omitempty"`
	AutoScan                bool               `protobuf:"varint,3,opt,name=auto_scan,json=autoScan" json:"auto_scan,omitempty"`
	Squelch                 Squelch            `protobuf:"varint,4,opt,name=squelch,enum=go.ea7jmf.codeplug.tytera.Squelch" json:"squelch,omitempty"`
	LoneWorker              bool               `protobuf:"varint,5,opt,name=lone_worker,json=loneWorker" json:"lone_worker,omitempty"`
	Talkaround              bool               `protobuf:"varint,6,opt,name=talkaround" json:"talkaround,omitempty"`
	RxOnly                  bool               `protobuf:"varint,7,opt,name=rx_only,json=rxOnly" json:"rx_only,omitempty"`
	Slot                    Slot               `protobuf:"varint,8,opt,name=slot,enum=go.ea7jmf.codeplug.tytera.Slot" json:"slot,omitempty"`
	ColorCode               uint32             `protobuf:"varint,9,opt,name=color_code,json=colorCode" json:"color_code,omitempty"`
	KeyIndex                uint32             `protobuf:"varint,10,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	PrivacyType             CipherSystem       `protobuf:"varint,11,opt,name=privacy_type,json=privacyType,enum=go.ea7jmf.codeplug.tytera.CipherSystem" json:"privacy_type,omitempty"`
	PrivateCall             bool               `protobuf:"varint,12,opt,name=private_call,json=privateCall" json:"private_call,omitempty"`
	DataCall                bool               `protobuf:"varint,13,opt,name=data_call,json=dataCall" json:"data_call,omitempty"`
	RxRefFrequency          ReferenceFrequency `protobuf:"varint,14,opt,name=rx_ref_frequency,json=rxRefFrequency,enum=go.ea7jmf.codeplug.tytera.ReferenceFrequency" json:"rx_ref_frequency,omitempty"`
	EmergencyAlarmAck       bool               `protobuf:"varint,15,opt,name=emergency_alarm_ack,json=emergencyAlarmAck" json:"emergency_alarm_ack,omitempty"`
	CompressedUdpDataHeader bool               `protobuf:"varint,16,opt,name=compressed_udp_data_header,json=compressedUdpDataHeader" json:"compressed_udp_data_header,omitempty"`
	DisplayPttId            bool               `protobuf:"varint,17,opt,name=display_ptt_id,json=displayPttId" json:"display_ptt_id,omitempty"`
	TxRefFrequency          ReferenceFrequency `protobuf:"varint,18,opt,name=tx_ref_frequency,json=txRefFrequency,enum=go.ea7jmf.codeplug.tytera.ReferenceFrequency" json:"tx_ref_frequency,omitempty"`
	ReverseBurst            bool               `protobuf:"varint,19,opt,name=reverse_burst,json=reverseBurst" json:"reverse_burst,omitempty"`
	QtReverse               bool               `protobuf:"varint,20,opt,name=qt_reverse,json=qtReverse" json:"qt_reverse,omitempty"`
	Vox                     bool               `protobuf:"varint,21,opt,name=vox" json:"vox,omitempty"`
	Power                   PowerSetting       `protobuf:"varint,22,opt,name=power,enum=go.ea7jmf.codeplug.tytera.PowerSetting" json:"power,omitempty"`
	AdmitCriteria           AdmitCriteria      `protobuf:"varint,23,opt,name=admit_criteria,json=admitCriteria,enum=go.ea7jmf.codeplug.tytera.AdmitCriteria" json:"admit_criteria,omitempty"`
	Contact                 uint32             `protobuf:"varint,24,opt,name=contact" json:"contact,omitempty"`
	Tot                     uint32             `protobuf:"varint,25,opt,name=tot" json:"tot,omitempty"`
	TotRekeyDelay           uint32             `protobuf:"varint,26,opt,name=tot_rekey_delay,json=totRekeyDelay" json:"tot_rekey_delay,omitempty"`
	EmergencySystem         uint32             `protobuf:"varint,27,opt,name=emergency_system,json=emergencySystem" json:"emergency_system,omitempty"`
	ScanList                uint32             `protobuf:"varint,28,opt,name=scan_list,json=scanList" json:"scan_list,omitempty"`
	RxGroup                 uint32             `protobuf:"varint,29,opt,name=rx_group,json=rxGroup" json:"rx_group,omitempty"`
	RxFrequency             uint64             `protobuf:"varint,30,opt,name=rx_frequency,json=rxFrequency" json:"rx_frequency,omitempty"`
	TxFrequency             uint64             `protobuf:"varint,31,opt,name=tx_frequency,json=txFrequency" json:"tx_frequency,omitempty"`
	DecodingTone            *Tone              `protobuf:"bytes,32,opt,name=decoding_tone,json=decodingTone" json:"decoding_tone,omitempty"`
	EncodingTone            *Tone              `protobuf:"bytes,33,opt,name=encoding_tone,json=encodingTone" json:"encoding_tone,omitempty"`
	RxSignaling             SignalingSystem    `protobuf:"varint,34,opt,name=rx_signaling,json=rxSignaling,enum=go.ea7jmf.codeplug.tytera.SignalingSystem" json:"rx_signaling,omitempty"`
	TxSignaling             SignalingSystem    `protobuf:"varint,35,opt,name=tx_signaling,json=txSignaling,enum=go.ea7jmf.codeplug.tytera.SignalingSystem" json:"tx_signaling,omitempty"`
	Name                    string             `protobuf:"bytes,36,opt,name=name" json:"name,omitempty"`
	Gps                     uint32             `protobuf:"varint,37,opt,name=gps" json:"gps,omitempty"`
	AnalogDecode_1          bool               `protobuf:"varint,101,opt,name=analog_decode_1,json=analogDecode1" json:"analog_decode_1,omitempty"`
	AnalogDecode_2          bool               `protobuf:"varint,102,opt,name=analog_decode_2,json=analogDecode2" json:"analog_decode_2,omitempty"`
	AnalogDecode_3          bool               `protobuf:"varint,103,opt,name=analog_decode_3,json=analogDecode3" json:"analog_decode_3,omitempty"`
	AnalogDecode_4          bool               `protobuf:"varint,104,opt,name=analog_decode_4,json=analogDecode4" json:"analog_decode_4,omitempty"`
	AnalogDecode_5          bool               `protobuf:"varint,105,opt,name=analog_decode_5,json=analogDecode5" json:"analog_decode_5,omitempty"`
	AnalogDecode_6          bool               `protobuf:"varint,106,opt,name=analog_decode_6,json=analogDecode6" json:"analog_decode_6,omitempty"`
	AnalogDecode_7          bool               `protobuf:"varint,107,opt,name=analog_decode_7,json=analogDecode7" json:"analog_decode_7,omitempty"`
	AnalogDecode_8          bool               `protobuf:"varint,108,opt,name=analog_decode_8,json=analogDecode8" json:"analog_decode_8,omitempty"`
}

func (m *ChannelEntry) Reset()                    { *m = ChannelEntry{} }
func (m *ChannelEntry) String() string            { return proto.CompactTextString(m) }
func (*ChannelEntry) ProtoMessage()               {}
func (*ChannelEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ChannelEntry) GetMode() ChannelMode {
	if m != nil {
		return m.Mode
	}
	return ChannelMode_UNSET_CHANNEL
}

func (m *ChannelEntry) GetBandwidth() Bandwidth {
	if m != nil {
		return m.Bandwidth
	}
	return Bandwidth_NARROW
}

func (m *ChannelEntry) GetAutoScan() bool {
	if m != nil {
		return m.AutoScan
	}
	return false
}

func (m *ChannelEntry) GetSquelch() Squelch {
	if m != nil {
		return m.Squelch
	}
	return Squelch_TIGHT
}

func (m *ChannelEntry) GetLoneWorker() bool {
	if m != nil {
		return m.LoneWorker
	}
	return false
}

func (m *ChannelEntry) GetTalkaround() bool {
	if m != nil {
		return m.Talkaround
	}
	return false
}

func (m *ChannelEntry) GetRxOnly() bool {
	if m != nil {
		return m.RxOnly
	}
	return false
}

func (m *ChannelEntry) GetSlot() Slot {
	if m != nil {
		return m.Slot
	}
	return Slot_SLOT_INVALID
}

func (m *ChannelEntry) GetColorCode() uint32 {
	if m != nil {
		return m.ColorCode
	}
	return 0
}

func (m *ChannelEntry) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *ChannelEntry) GetPrivacyType() CipherSystem {
	if m != nil {
		return m.PrivacyType
	}
	return CipherSystem_UNSET_CIPHER
}

func (m *ChannelEntry) GetPrivateCall() bool {
	if m != nil {
		return m.PrivateCall
	}
	return false
}

func (m *ChannelEntry) GetDataCall() bool {
	if m != nil {
		return m.DataCall
	}
	return false
}

func (m *ChannelEntry) GetRxRefFrequency() ReferenceFrequency {
	if m != nil {
		return m.RxRefFrequency
	}
	return ReferenceFrequency_LOW_REFERENCE
}

func (m *ChannelEntry) GetEmergencyAlarmAck() bool {
	if m != nil {
		return m.EmergencyAlarmAck
	}
	return false
}

func (m *ChannelEntry) GetCompressedUdpDataHeader() bool {
	if m != nil {
		return m.CompressedUdpDataHeader
	}
	return false
}

func (m *ChannelEntry) GetDisplayPttId() bool {
	if m != nil {
		return m.DisplayPttId
	}
	return false
}

func (m *ChannelEntry) GetTxRefFrequency() ReferenceFrequency {
	if m != nil {
		return m.TxRefFrequency
	}
	return ReferenceFrequency_LOW_REFERENCE
}

func (m *ChannelEntry) GetReverseBurst() bool {
	if m != nil {
		return m.ReverseBurst
	}
	return false
}

func (m *ChannelEntry) GetQtReverse() bool {
	if m != nil {
		return m.QtReverse
	}
	return false
}

func (m *ChannelEntry) GetVox() bool {
	if m != nil {
		return m.Vox
	}
	return false
}

func (m *ChannelEntry) GetPower() PowerSetting {
	if m != nil {
		return m.Power
	}
	return PowerSetting_LOW_POWER
}

func (m *ChannelEntry) GetAdmitCriteria() AdmitCriteria {
	if m != nil {
		return m.AdmitCriteria
	}
	return AdmitCriteria_ADMIT_ALWAYS
}

func (m *ChannelEntry) GetContact() uint32 {
	if m != nil {
		return m.Contact
	}
	return 0
}

func (m *ChannelEntry) GetTot() uint32 {
	if m != nil {
		return m.Tot
	}
	return 0
}

func (m *ChannelEntry) GetTotRekeyDelay() uint32 {
	if m != nil {
		return m.TotRekeyDelay
	}
	return 0
}

func (m *ChannelEntry) GetEmergencySystem() uint32 {
	if m != nil {
		return m.EmergencySystem
	}
	return 0
}

func (m *ChannelEntry) GetScanList() uint32 {
	if m != nil {
		return m.ScanList
	}
	return 0
}

func (m *ChannelEntry) GetRxGroup() uint32 {
	if m != nil {
		return m.RxGroup
	}
	return 0
}

func (m *ChannelEntry) GetRxFrequency() uint64 {
	if m != nil {
		return m.RxFrequency
	}
	return 0
}

func (m *ChannelEntry) GetTxFrequency() uint64 {
	if m != nil {
		return m.TxFrequency
	}
	return 0
}

func (m *ChannelEntry) GetDecodingTone() *Tone {
	if m != nil {
		return m.DecodingTone
	}
	return nil
}

func (m *ChannelEntry) GetEncodingTone() *Tone {
	if m != nil {
		return m.EncodingTone
	}
	return nil
}

func (m *ChannelEntry) GetRxSignaling() SignalingSystem {
	if m != nil {
		return m.RxSignaling
	}
	return SignalingSystem_NO_SIGNALING
}

func (m *ChannelEntry) GetTxSignaling() SignalingSystem {
	if m != nil {
		return m.TxSignaling
	}
	return SignalingSystem_NO_SIGNALING
}

func (m *ChannelEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelEntry) GetGps() uint32 {
	if m != nil {
		return m.Gps
	}
	return 0
}

func (m *ChannelEntry) GetAnalogDecode_1() bool {
	if m != nil {
		return m.AnalogDecode_1
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_2() bool {
	if m != nil {
		return m.AnalogDecode_2
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_3() bool {
	if m != nil {
		return m.AnalogDecode_3
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_4() bool {
	if m != nil {
		return m.AnalogDecode_4
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_5() bool {
	if m != nil {
		return m.AnalogDecode_5
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_6() bool {
	if m != nil {
		return m.AnalogDecode_6
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_7() bool {
	if m != nil {
		return m.AnalogDecode_7
	}
	return false
}

func (m *ChannelEntry) GetAnalogDecode_8() bool {
	if m != nil {
		return m.AnalogDecode_8
	}
	return false
}

type Channels struct {
	Entries []*ChannelEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Channels) Reset()                    { *m = Channels{} }
func (m *Channels) String() string            { return proto.CompactTextString(m) }
func (*Channels) ProtoMessage()               {}
func (*Channels) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Channels) GetEntries() []*ChannelEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type DTMFSystemEntry struct {
	FirstDigitDelay   uint32 `protobuf:"varint,1,opt,name=first_digit_delay,json=firstDigitDelay" json:"first_digit_delay,omitempty"`
	FirstDigitTime    uint32 `protobuf:"varint,2,opt,name=first_digit_time,json=firstDigitTime" json:"first_digit_time,omitempty"`
	DigitDurationTime uint32 `protobuf:"varint,3,opt,name=digit_duration_time,json=digitDurationTime" json:"digit_duration_time,omitempty"`
	DigitIntervalTime uint32 `protobuf:"varint,4,opt,name=digit_interval_time,json=digitIntervalTime" json:"digit_interval_time,omitempty"`
	StarHashDigitTime uint32 `protobuf:"varint,6,opt,name=star_hash_digit_time,json=starHashDigitTime" json:"star_hash_digit_time,omitempty"`
	DKeyAssignment    uint32 `protobuf:"varint,7,opt,name=d_key_assignment,json=dKeyAssignment" json:"d_key_assignment,omitempty"`
	// it's stored as tenths of whatever unit
	NextSequence  uint32        `protobuf:"varint,8,opt,name=next_sequence,json=nextSequence" json:"next_sequence,omitempty"`
	AutoResetTime uint32        `protobuf:"varint,9,opt,name=auto_reset_time,json=autoResetTime" json:"auto_reset_time,omitempty"`
	SideTone      bool          `protobuf:"varint,10,opt,name=side_tone,json=sideTone" json:"side_tone,omitempty"`
	PttId         PttIdType     `protobuf:"varint,11,opt,name=ptt_id,json=pttId,enum=go.ea7jmf.codeplug.tytera.PttIdType" json:"ptt_id,omitempty"`
	GroupCode     GroupCodeType `protobuf:"varint,12,opt,name=group_code,json=groupCode,enum=go.ea7jmf.codeplug.tytera.GroupCodeType" json:"group_code,omitempty"`
	KeyUpEncode   string        `protobuf:"bytes,13,opt,name=key_up_encode,json=keyUpEncode" json:"key_up_encode,omitempty"`
	KeyDownEncode string        `protobuf:"bytes,14,opt,name=key_down_encode,json=keyDownEncode" json:"key_down_encode,omitempty"`
}

func (m *DTMFSystemEntry) Reset()                    { *m = DTMFSystemEntry{} }
func (m *DTMFSystemEntry) String() string            { return proto.CompactTextString(m) }
func (*DTMFSystemEntry) ProtoMessage()               {}
func (*DTMFSystemEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DTMFSystemEntry) GetFirstDigitDelay() uint32 {
	if m != nil {
		return m.FirstDigitDelay
	}
	return 0
}

func (m *DTMFSystemEntry) GetFirstDigitTime() uint32 {
	if m != nil {
		return m.FirstDigitTime
	}
	return 0
}

func (m *DTMFSystemEntry) GetDigitDurationTime() uint32 {
	if m != nil {
		return m.DigitDurationTime
	}
	return 0
}

func (m *DTMFSystemEntry) GetDigitIntervalTime() uint32 {
	if m != nil {
		return m.DigitIntervalTime
	}
	return 0
}

func (m *DTMFSystemEntry) GetStarHashDigitTime() uint32 {
	if m != nil {
		return m.StarHashDigitTime
	}
	return 0
}

func (m *DTMFSystemEntry) GetDKeyAssignment() uint32 {
	if m != nil {
		return m.DKeyAssignment
	}
	return 0
}

func (m *DTMFSystemEntry) GetNextSequence() uint32 {
	if m != nil {
		return m.NextSequence
	}
	return 0
}

func (m *DTMFSystemEntry) GetAutoResetTime() uint32 {
	if m != nil {
		return m.AutoResetTime
	}
	return 0
}

func (m *DTMFSystemEntry) GetSideTone() bool {
	if m != nil {
		return m.SideTone
	}
	return false
}

func (m *DTMFSystemEntry) GetPttId() PttIdType {
	if m != nil {
		return m.PttId
	}
	return PttIdType_NO_PTT_ID
}

func (m *DTMFSystemEntry) GetGroupCode() GroupCodeType {
	if m != nil {
		return m.GroupCode
	}
	return GroupCodeType_NO_GROUP_CODE
}

func (m *DTMFSystemEntry) GetKeyUpEncode() string {
	if m != nil {
		return m.KeyUpEncode
	}
	return ""
}

func (m *DTMFSystemEntry) GetKeyDownEncode() string {
	if m != nil {
		return m.KeyDownEncode
	}
	return ""
}

type DTMFDecodeEntry struct {
	DtmfId             string       `protobuf:"bytes,1,opt,name=dtmf_id,json=dtmfId" json:"dtmf_id,omitempty"`
	ResponseType       ResponseType `protobuf:"varint,2,opt,name=response_type,json=responseType,enum=go.ea7jmf.codeplug.tytera.ResponseType" json:"response_type,omitempty"`
	DecodeType         DecodeType   `protobuf:"varint,3,opt,name=decode_type,json=decodeType,enum=go.ea7jmf.codeplug.tytera.DecodeType" json:"decode_type,omitempty"`
	AckEncodeIndex     uint32       `protobuf:"varint,4,opt,name=ack_encode_index,json=ackEncodeIndex" json:"ack_encode_index,omitempty"`
	AckDelayTime       uint32       `protobuf:"varint,5,opt,name=ack_delay_time,json=ackDelayTime" json:"ack_delay_time,omitempty"`
	RevertChannelIndex uint32       `protobuf:"varint,6,opt,name=revert_channel_index,json=revertChannelIndex" json:"revert_channel_index,omitempty"`
}

func (m *DTMFDecodeEntry) Reset()                    { *m = DTMFDecodeEntry{} }
func (m *DTMFDecodeEntry) String() string            { return proto.CompactTextString(m) }
func (*DTMFDecodeEntry) ProtoMessage()               {}
func (*DTMFDecodeEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DTMFDecodeEntry) GetDtmfId() string {
	if m != nil {
		return m.DtmfId
	}
	return ""
}

func (m *DTMFDecodeEntry) GetResponseType() ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return ResponseType_GENERAL
}

func (m *DTMFDecodeEntry) GetDecodeType() DecodeType {
	if m != nil {
		return m.DecodeType
	}
	return DecodeType_DECODE_TYPE_NONE
}

func (m *DTMFDecodeEntry) GetAckEncodeIndex() uint32 {
	if m != nil {
		return m.AckEncodeIndex
	}
	return 0
}

func (m *DTMFDecodeEntry) GetAckDelayTime() uint32 {
	if m != nil {
		return m.AckDelayTime
	}
	return 0
}

func (m *DTMFDecodeEntry) GetRevertChannelIndex() uint32 {
	if m != nil {
		return m.RevertChannelIndex
	}
	return 0
}

type DTMFSettings struct {
	// up to 4 entries
	Systems []*DTMFSystemEntry `protobuf:"bytes,1,rep,name=systems" json:"systems,omitempty"`
	// up to 32 entries
	Encodes []string `protobuf:"bytes,2,rep,name=encodes" json:"encodes,omitempty"`
	// up to 8 entries
	Decodes []*DTMFDecodeEntry `protobuf:"bytes,3,rep,name=decodes" json:"decodes,omitempty"`
}

func (m *DTMFSettings) Reset()                    { *m = DTMFSettings{} }
func (m *DTMFSettings) String() string            { return proto.CompactTextString(m) }
func (*DTMFSettings) ProtoMessage()               {}
func (*DTMFSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DTMFSettings) GetSystems() []*DTMFSystemEntry {
	if m != nil {
		return m.Systems
	}
	return nil
}

func (m *DTMFSettings) GetEncodes() []string {
	if m != nil {
		return m.Encodes
	}
	return nil
}

func (m *DTMFSettings) GetDecodes() []*DTMFDecodeEntry {
	if m != nil {
		return m.Decodes
	}
	return nil
}

type GPSSystemEntry struct {
	RevertChannelIndex      uint32 `protobuf:"varint,1,opt,name=revert_channel_index,json=revertChannelIndex" json:"revert_channel_index,omitempty"`
	ReportInterval          uint32 `protobuf:"varint,2,opt,name=report_interval,json=reportInterval" json:"report_interval,omitempty"`
	DestinationContactIndex uint32 `protobuf:"varint,3,opt,name=destination_contact_index,json=destinationContactIndex" json:"destination_contact_index,omitempty"`
}

func (m *GPSSystemEntry) Reset()                    { *m = GPSSystemEntry{} }
func (m *GPSSystemEntry) String() string            { return proto.CompactTextString(m) }
func (*GPSSystemEntry) ProtoMessage()               {}
func (*GPSSystemEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GPSSystemEntry) GetRevertChannelIndex() uint32 {
	if m != nil {
		return m.RevertChannelIndex
	}
	return 0
}

func (m *GPSSystemEntry) GetReportInterval() uint32 {
	if m != nil {
		return m.ReportInterval
	}
	return 0
}

func (m *GPSSystemEntry) GetDestinationContactIndex() uint32 {
	if m != nil {
		return m.DestinationContactIndex
	}
	return 0
}

type GPSSystems struct {
	Entries []*GPSSystemEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *GPSSystems) Reset()                    { *m = GPSSystems{} }
func (m *GPSSystems) String() string            { return proto.CompactTextString(m) }
func (*GPSSystems) ProtoMessage()               {}
func (*GPSSystems) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GPSSystems) GetEntries() []*GPSSystemEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*TyteraCodeplug)(nil), "go.ea7jmf.codeplug.tytera.TyteraCodeplug")
	proto.RegisterType((*BasicInformation)(nil), "go.ea7jmf.codeplug.tytera.BasicInformation")
	proto.RegisterType((*GeneralSettings)(nil), "go.ea7jmf.codeplug.tytera.GeneralSettings")
	proto.RegisterType((*MenuItems)(nil), "go.ea7jmf.codeplug.tytera.MenuItems")
	proto.RegisterType((*ContactsMenu)(nil), "go.ea7jmf.codeplug.tytera.ContactsMenu")
	proto.RegisterType((*CallLogMenu)(nil), "go.ea7jmf.codeplug.tytera.CallLogMenu")
	proto.RegisterType((*ScanMenu)(nil), "go.ea7jmf.codeplug.tytera.ScanMenu")
	proto.RegisterType((*UtilitiesMenu)(nil), "go.ea7jmf.codeplug.tytera.UtilitiesMenu")
	proto.RegisterType((*OneTouchAccessEntry)(nil), "go.ea7jmf.codeplug.tytera.OneTouchAccessEntry")
	proto.RegisterType((*ButtonDefinitions)(nil), "go.ea7jmf.codeplug.tytera.ButtonDefinitions")
	proto.RegisterType((*MessagePresets)(nil), "go.ea7jmf.codeplug.tytera.MessagePresets")
	proto.RegisterType((*PrivacySettings)(nil), "go.ea7jmf.codeplug.tytera.PrivacySettings")
	proto.RegisterType((*EmergencySystemEntry)(nil), "go.ea7jmf.codeplug.tytera.EmergencySystemEntry")
	proto.RegisterType((*EmergencySystems)(nil), "go.ea7jmf.codeplug.tytera.EmergencySystems")
	proto.RegisterType((*ContactEntry)(nil), "go.ea7jmf.codeplug.tytera.ContactEntry")
	proto.RegisterType((*Contacts)(nil), "go.ea7jmf.codeplug.tytera.Contacts")
	proto.RegisterType((*RxGroupEntry)(nil), "go.ea7jmf.codeplug.tytera.RxGroupEntry")
	proto.RegisterType((*RxGroups)(nil), "go.ea7jmf.codeplug.tytera.RxGroups")
	proto.RegisterType((*ZoneEntry)(nil), "go.ea7jmf.codeplug.tytera.ZoneEntry")
	proto.RegisterType((*Zones)(nil), "go.ea7jmf.codeplug.tytera.Zones")
	proto.RegisterType((*ScanListEntry)(nil), "go.ea7jmf.codeplug.tytera.ScanListEntry")
	proto.RegisterType((*ScanLists)(nil), "go.ea7jmf.codeplug.tytera.ScanLists")
	proto.RegisterType((*Tone)(nil), "go.ea7jmf.codeplug.tytera.Tone")
	proto.RegisterType((*ChannelEntry)(nil), "go.ea7jmf.codeplug.tytera.ChannelEntry")
	proto.RegisterType((*Channels)(nil), "go.ea7jmf.codeplug.tytera.Channels")
	proto.RegisterType((*DTMFSystemEntry)(nil), "go.ea7jmf.codeplug.tytera.DTMFSystemEntry")
	proto.RegisterType((*DTMFDecodeEntry)(nil), "go.ea7jmf.codeplug.tytera.DTMFDecodeEntry")
	proto.RegisterType((*DTMFSettings)(nil), "go.ea7jmf.codeplug.tytera.DTMFSettings")
	proto.RegisterType((*GPSSystemEntry)(nil), "go.ea7jmf.codeplug.tytera.GPSSystemEntry")
	proto.RegisterType((*GPSSystems)(nil), "go.ea7jmf.codeplug.tytera.GPSSystems")
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.RadioBand", RadioBand_name, RadioBand_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.MonitorType", MonitorType_name, MonitorType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.SystemType", SystemType_name, SystemType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.IntroScreenMode", IntroScreenMode_name, IntroScreenMode_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.OperationMode", OperationMode_name, OperationMode_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.ButtonFunction", ButtonFunction_name, ButtonFunction_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.OneTouchCallType", OneTouchCallType_name, OneTouchCallType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.AlarmType", AlarmType_name, AlarmType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.AlarmMode", AlarmMode_name, AlarmMode_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.CallType", CallType_name, CallType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.ChannelMode", ChannelMode_name, ChannelMode_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.Bandwidth", Bandwidth_name, Bandwidth_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.Squelch", Squelch_name, Squelch_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.Slot", Slot_name, Slot_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.CipherSystem", CipherSystem_name, CipherSystem_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.ReferenceFrequency", ReferenceFrequency_name, ReferenceFrequency_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.PowerSetting", PowerSetting_name, PowerSetting_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.AdmitCriteria", AdmitCriteria_name, AdmitCriteria_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.SignalingSystem", SignalingSystem_name, SignalingSystem_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.ToneSystem", ToneSystem_name, ToneSystem_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.DecodeType", DecodeType_name, DecodeType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.PttIdType", PttIdType_name, PttIdType_value)
	proto.RegisterEnum("go.ea7jmf.codeplug.tytera.GroupCodeType", GroupCodeType_name, GroupCodeType_value)
}

func init() { proto.RegisterFile("proto/tytera/tytera.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x7a, 0x4d, 0x7b, 0xe3, 0x46,
	0x72, 0xff, 0x90, 0xd2, 0x48, 0x64, 0xf1, 0x0d, 0xea, 0x79, 0xe3, 0xcc, 0xae, 0x77, 0xc6, 0x9a,
	0xb1, 0x57, 0x96, 0xbd, 0x1a, 0x49, 0xf3, 0x66, 0xaf, 0xf7, 0xff, 0x8f, 0x31, 0x24, 0x24, 0x31,
	0x43, 0x91, 0x32, 0x48, 0xcd, 0xd8, 0xce, 0x93, 0xf4, 0x03, 0x11, 0x2d, 0x0a, 0x2b, 0x10, 0xa0,
	0x01, 0x50, 0x43, 0xe6, 0x6b, 0x24, 0x77, 0xe7, 0x94, 0x7c, 0x81, 0xe4, 0x0b, 0xe4, 0x98, 0x0f,
	0x90, 0x63, 0x4e, 0x39, 0xe5, 0x90, 0x73, 0x6e, 0xc9, 0x53, 0xd5, 0x0d, 0x12, 0x84, 0x64, 0x6a,
	0xec, 0x13, 0x81, 0xea, 0x5f, 0x15, 0xba, 0xbb, 0x5e, 0xba, 0xaa, 0x9a, 0x70, 0x7f, 0x18, 0xf8,
	0x91, 0xff, 0x34, 0x9a, 0x44, 0x22, 0xb0, 0xd4, 0xcf, 0x16, 0xd1, 0xd8, 0xfd, 0xbe, 0xbf, 0x25,
	0xac, 0x57, 0x7f, 0x1e, 0x9c, 0x6e, 0xf5, 0x7c, 0x5b, 0x0c, 0xdd, 0x51, 0x7f, 0x4b, 0x02, 0x1e,
	0x3c, 0xec, 0xfb, 0x7e, 0xdf, 0x15, 0x4f, 0x09, 0x78, 0x32, 0x3a, 0x7d, 0x1a, 0x39, 0x03, 0x11,
	0x46, 0xd6, 0x60, 0x28, 0x79, 0xd7, 0x7f, 0xca, 0x41, 0xb9, 0x4b, 0xd8, 0x9a, 0x62, 0x65, 0xdf,
	0xc1, 0xda, 0x89, 0x15, 0x3a, 0x3d, 0xee, 0x78, 0xa7, 0x7e, 0x30, 0xb0, 0x22, 0xc7, 0xf7, 0xaa,
	0x99, 0x47, 0x99, 0x8d, 0xc2, 0xee, 0xe7, 0x5b, 0x3f, 0xfb, 0xa9, 0xad, 0xd7, 0xc8, 0xd3, 0x98,
	0xb1, 0x98, 0xda, 0x49, 0x8a, 0xc2, 0x8e, 0x41, 0xeb, 0x0b, 0x4f, 0x04, 0x96, 0xcb, 0x43, 0x11,
	0x45, 0x8e, 0xd7, 0x0f, 0xab, 0x59, 0x12, 0xbc, 0xb9, 0x40, 0xf0, 0xbe, 0x64, 0xe9, 0x28, 0x0e,
	0xb3, 0xd2, 0x9f, 0x27, 0xb0, 0x1a, 0xc0, 0x40, 0x78, 0x23, 0xee, 0x44, 0x62, 0x10, 0x56, 0x97,
	0x48, 0xe0, 0x93, 0x05, 0x02, 0x0f, 0x85, 0x37, 0x6a, 0x20, 0xd6, 0xcc, 0x0f, 0xe2, 0x47, 0xf6,
	0x57, 0xc0, 0x4e, 0x46, 0x51, 0xe4, 0x7b, 0xdc, 0x16, 0xa7, 0x8e, 0xe7, 0xe0, 0x84, 0xc3, 0xea,
	0x32, 0x09, 0xfb, 0x62, 0xd1, 0xb2, 0x89, 0xa9, 0x3e, 0xe3, 0x31, 0xd7, 0x4e, 0xd2, 0x24, 0x66,
	0x42, 0x65, 0x20, 0xc2, 0xd0, 0xea, 0x0b, 0x3e, 0x0c, 0x44, 0x28, 0xa2, 0xb0, 0x7a, 0x93, 0x24,
	0x7f, 0xb6, 0x70, 0x9a, 0xc4, 0x71, 0x24, 0x19, 0xcc, 0xf2, 0x60, 0xee, 0x1d, 0x37, 0x73, 0x18,
	0x38, 0x17, 0x56, 0x6f, 0x32, 0xdb, 0xcc, 0x95, 0x6b, 0x37, 0xf3, 0x48, 0xb2, 0xcc, 0x36, 0x73,
	0x38, 0x4f, 0x40, 0xed, 0x8b, 0x81, 0x08, 0xfa, 0xc2, 0x43, 0xc1, 0x93, 0x90, 0xf6, 0x74, 0xf5,
	0x5a, 0xed, 0x1b, 0x31, 0x4f, 0x47, 0xb2, 0x98, 0x9a, 0x48, 0x51, 0xd8, 0x5f, 0x40, 0xae, 0xe7,
	0x7b, 0x91, 0xd5, 0x8b, 0xc2, 0x6a, 0x8e, 0x04, 0x3e, 0x5e, 0x20, 0xb0, 0xa6, 0xa0, 0xe6, 0x94,
	0x89, 0x7d, 0x03, 0xf9, 0x60, 0xcc, 0xfb, 0x81, 0x3f, 0x1a, 0x86, 0xd5, 0xfc, 0xb5, 0x12, 0xcc,
	0xf1, 0x3e, 0x41, 0xcd, 0x5c, 0xa0, 0x9e, 0xd8, 0x4b, 0xb8, 0xf9, 0xb7, 0xbe, 0x27, 0xc2, 0x2a,
	0x10, 0xf7, 0xa3, 0x05, 0xdc, 0x3f, 0x20, 0xce, 0x94, 0x70, 0xb4, 0xb0, 0xb0, 0x67, 0x79, 0xdc,
	0x75, 0xc2, 0x28, 0xac, 0x16, 0xae, 0xb5, 0xb0, 0x4e, 0xcf, 0xf2, 0x9a, 0x88, 0x35, 0xf3, 0x61,
	0xfc, 0x48, 0xeb, 0x3f, 0xb3, 0x3c, 0x4f, 0xb8, 0x61, 0xb5, 0x78, 0xfd, 0xfa, 0x15, 0xd4, 0x9c,
	0x32, 0xb1, 0xaf, 0x61, 0xd9, 0x8e, 0x06, 0xa7, 0xd5, 0x12, 0x31, 0xff, 0x7e, 0x01, 0x73, 0xbd,
	0x7b, 0xb8, 0x37, 0x55, 0x31, 0x31, 0xb1, 0x57, 0xb0, 0xd4, 0x1f, 0x86, 0xd5, 0x32, 0xf1, 0x7e,
	0xb2, 0xc8, 0xdd, 0x8e, 0x3a, 0xb1, 0x0e, 0x91, 0x63, 0xfd, 0xdf, 0xb2, 0xa0, 0xa5, 0x7d, 0x9b,
	0x7d, 0x04, 0x30, 0xf0, 0x6d, 0xe1, 0x72, 0xcf, 0x1a, 0x08, 0x0a, 0x0e, 0x79, 0x33, 0x4f, 0x94,
	0x96, 0x35, 0x10, 0xcc, 0x80, 0x42, 0x60, 0xd9, 0x8e, 0xcf, 0x4f, 0x2c, 0xcf, 0x46, 0x1f, 0x5f,
	0xda, 0x28, 0x2f, 0xdc, 0x30, 0x13, 0xd1, 0xaf, 0x2d, 0xcf, 0x36, 0x21, 0x88, 0x1f, 0x43, 0xf6,
	0x19, 0x68, 0x67, 0x56, 0x60, 0xbf, 0xb7, 0x02, 0xc1, 0x2f, 0x44, 0x10, 0x62, 0x20, 0x5a, 0xa2,
	0x6f, 0x55, 0x62, 0xfa, 0x5b, 0x49, 0x66, 0x0f, 0xa1, 0x30, 0xe8, 0x8d, 0xa6, 0xa8, 0x65, 0x42,
	0xc1, 0xa0, 0x37, 0x8a, 0x01, 0xbf, 0x81, 0xbc, 0x2d, 0x2e, 0x9c, 0x9e, 0xe0, 0x8e, 0x4d, 0xce,
	0x97, 0x37, 0x73, 0x92, 0xd0, 0xb0, 0xd9, 0x1e, 0xac, 0xb9, 0x56, 0x18, 0xf1, 0x61, 0xe0, 0xf7,
	0x03, 0x6b, 0xc0, 0x6d, 0x2b, 0x12, 0xca, 0x99, 0x1e, 0x6c, 0xc9, 0x10, 0xba, 0x15, 0x87, 0xd0,
	0xad, 0x6e, 0x1c, 0x42, 0xcd, 0x0a, 0x32, 0x1d, 0x49, 0x9e, 0xba, 0x15, 0x09, 0x9c, 0x45, 0x6f,
	0x18, 0x4e, 0x67, 0xb1, 0x2a, 0x67, 0xd1, 0x1b, 0x86, 0x6a, 0x16, 0xeb, 0xff, 0x0d, 0x50, 0x49,
	0xc5, 0x33, 0xf6, 0x31, 0x14, 0xc3, 0x5e, 0x20, 0x04, 0x9a, 0x17, 0xda, 0x66, 0xe6, 0xd1, 0xd2,
	0x46, 0xde, 0x2c, 0x48, 0x5a, 0x13, 0x49, 0xac, 0x01, 0xc5, 0x81, 0xef, 0x39, 0x91, 0x1f, 0xf0,
	0x68, 0x32, 0x14, 0x14, 0x34, 0xcb, 0xbb, 0x9f, 0x2e, 0x0a, 0x1e, 0x12, 0xde, 0x9d, 0x0c, 0x85,
	0x59, 0x18, 0xcc, 0x5e, 0xf0, 0x6b, 0xb6, 0x13, 0x5a, 0x27, 0xae, 0xe0, 0xae, 0xb0, 0x65, 0xb8,
	0xcc, 0x99, 0x05, 0x45, 0x6b, 0x0a, 0x3b, 0x64, 0x6d, 0xd0, 0x22, 0xcb, 0x3d, 0xe7, 0x43, 0x11,
	0x0c, 0x9c, 0x88, 0x47, 0xbe, 0x27, 0x68, 0x43, 0xcb, 0x0b, 0xed, 0x46, 0x1a, 0x0d, 0x7d, 0xb0,
	0x8c, 0xec, 0x47, 0xc4, 0xdd, 0xf5, 0x3d, 0xc1, 0xbe, 0x82, 0xfb, 0xf1, 0x37, 0x87, 0x56, 0x18,
	0xbe, 0xf7, 0x03, 0x9b, 0x5b, 0x9e, 0xcd, 0x5d, 0xbf, 0x77, 0x4e, 0xba, 0xc8, 0x99, 0x77, 0x15,
	0xe0, 0x48, 0x8d, 0xeb, 0x9e, 0xdd, 0xf4, 0x7b, 0xe7, 0xec, 0x29, 0xdc, 0x8e, 0x59, 0x7b, 0x67,
	0xfc, 0x34, 0x10, 0x42, 0xce, 0x67, 0x85, 0xb8, 0xd6, 0xd4, 0x58, 0xed, 0x6c, 0x2f, 0x10, 0x82,
	0xbe, 0xf5, 0x18, 0x4a, 0x31, 0x43, 0x44, 0xae, 0xbe, 0x4a, 0xc8, 0x78, 0xd1, 0x5d, 0xf2, 0xe7,
	0x1d, 0xb8, 0x73, 0x62, 0x45, 0x3c, 0xb4, 0x2e, 0x04, 0x0f, 0x44, 0x4f, 0x38, 0x17, 0x82, 0xa3,
	0xf5, 0x52, 0x5c, 0xca, 0x99, 0xec, 0xc4, 0x8a, 0x3a, 0xd6, 0x85, 0x30, 0xe5, 0xd0, 0xa1, 0x6f,
	0x0b, 0xb6, 0x89, 0xa7, 0xa2, 0x62, 0x19, 0x06, 0xc2, 0x1a, 0x9c, 0xb8, 0x82, 0x82, 0x50, 0xce,
	0xac, 0x28, 0xf8, 0x91, 0x22, 0xb3, 0xb7, 0xb0, 0xe6, 0x78, 0x51, 0xe0, 0x73, 0xa5, 0x57, 0x12,
	0x0d, 0xb4, 0x83, 0x8b, 0x62, 0x73, 0x03, 0x79, 0x3a, 0xc4, 0x82, 0x9f, 0x34, 0x2b, 0xce, 0x3c,
	0x81, 0xdd, 0x87, 0x9c, 0x74, 0x2b, 0xc7, 0xa6, 0x20, 0x54, 0x32, 0x57, 0xe9, 0xbd, 0x61, 0xa3,
	0xe5, 0x45, 0xe3, 0xd9, 0xc4, 0x8a, 0x34, 0x0a, 0xd1, 0x78, 0x3a, 0xa7, 0x4f, 0xa1, 0x42, 0x91,
	0x93, 0xf7, 0x2c, 0xd7, 0xe5, 0x67, 0x96, 0xd7, 0xa7, 0x38, 0x52, 0x32, 0x4b, 0x44, 0xae, 0x59,
	0xae, 0x7b, 0x60, 0x79, 0x7d, 0x5c, 0x27, 0x1d, 0x09, 0x91, 0x48, 0x20, 0xcb, 0x84, 0xac, 0xa8,
	0x81, 0x29, 0xf6, 0xf7, 0x50, 0xb9, 0xf0, 0xc7, 0x3c, 0x14, 0x5e, 0xe8, 0x44, 0xce, 0x85, 0x13,
	0x4d, 0xaa, 0x15, 0x42, 0x96, 0x2f, 0xfc, 0x71, 0x67, 0x46, 0x65, 0x4f, 0xa0, 0x1c, 0x8c, 0xb9,
	0xeb, 0xbf, 0xe7, 0x27, 0x56, 0x14, 0x89, 0x60, 0x52, 0xd5, 0x08, 0x57, 0x0c, 0xc6, 0x4d, 0xff,
	0xfd, 0x6b, 0x49, 0xc3, 0x29, 0xd2, 0x27, 0x2d, 0x57, 0x04, 0xca, 0xec, 0xd6, 0xe4, 0x14, 0x91,
	0xac, 0x23, 0x95, 0x54, 0xbc, 0x0d, 0xb7, 0x5d, 0xdf, 0x13, 0xfc, 0xbd, 0x1f, 0x9c, 0x8b, 0x80,
	0x07, 0x22, 0x1c, 0xfa, 0x5e, 0x28, 0xaa, 0x8c, 0xc0, 0x0c, 0xc7, 0xde, 0xd1, 0x90, 0xa9, 0x46,
	0x2e, 0x73, 0x0c, 0x1c, 0xcf, 0x16, 0x41, 0xf5, 0xd6, 0x65, 0x0e, 0x39, 0xc2, 0x9e, 0xc1, 0x5d,
	0x8a, 0xf8, 0xb6, 0xd3, 0x77, 0x22, 0x4b, 0x6e, 0x03, 0xc7, 0xe4, 0xa9, 0x7a, 0x9b, 0x78, 0x6e,
	0xe1, 0x68, 0x5d, 0x0e, 0xe2, 0x5e, 0x60, 0x50, 0x40, 0xb3, 0x22, 0x26, 0xcb, 0xb3, 0x5c, 0xbf,
	0x9f, 0xe0, 0xb9, 0x23, 0xbf, 0x83, 0x83, 0x3a, 0x8d, 0x4d, 0x59, 0x3e, 0x47, 0xb3, 0xea, 0x9d,
	0xbb, 0x4e, 0xff, 0x2c, 0x22, 0xac, 0x3f, 0x8a, 0xaa, 0xbf, 0x25, 0xb8, 0x36, 0x1d, 0xe8, 0x4a,
	0x3a, 0x2a, 0xf9, 0x5c, 0x4c, 0x86, 0x96, 0xf2, 0x9c, 0xbb, 0x52, 0xc9, 0x92, 0x44, 0xde, 0xd2,
	0x86, 0xb2, 0x3f, 0x14, 0x01, 0xc5, 0x68, 0x69, 0x75, 0xf7, 0xc8, 0xea, 0x36, 0x16, 0x58, 0x5d,
	0x3b, 0x66, 0x20, 0x9b, 0x2b, 0xf9, 0xc9, 0x57, 0xb2, 0x06, 0xff, 0xbd, 0x08, 0xb8, 0xef, 0x4d,
	0x5d, 0xb7, 0x5a, 0x55, 0xd6, 0x80, 0x03, 0x6d, 0x2f, 0xf6, 0x58, 0xf6, 0x27, 0x78, 0x20, 0xad,
	0x53, 0x45, 0xd1, 0x81, 0xe3, 0xf5, 0x67, 0x4c, 0xf7, 0x89, 0xa9, 0x4a, 0x88, 0xa3, 0x19, 0x60,
	0xca, 0xfd, 0x12, 0xee, 0x0d, 0x7b, 0x57, 0xb3, 0x3e, 0xa0, 0x30, 0x7a, 0x67, 0xd8, 0xbb, 0x8a,
	0xef, 0x23, 0x90, 0x27, 0x86, 0x3c, 0x89, 0x7e, 0x23, 0x4f, 0x22, 0xa2, 0xe0, 0x49, 0xb4, 0xfe,
	0xef, 0x59, 0xc8, 0x4f, 0xf3, 0x3d, 0x3c, 0x04, 0x66, 0x4a, 0xc9, 0xd0, 0x8c, 0x72, 0x67, 0xb1,
	0x2a, 0x1e, 0x43, 0x29, 0x12, 0xe3, 0x88, 0xab, 0x3c, 0x4b, 0xa6, 0xa6, 0x39, 0xb3, 0x88, 0x44,
	0x95, 0x8b, 0x61, 0x26, 0x30, 0x4b, 0x62, 0x96, 0xae, 0x3d, 0x87, 0xe3, 0x24, 0x06, 0x67, 0x90,
	0x48, 0x64, 0x74, 0xc8, 0x91, 0xa1, 0xbb, 0x7e, 0x5f, 0x65, 0x98, 0x8b, 0x42, 0x39, 0xba, 0x5b,
	0xd3, 0xef, 0x93, 0x8c, 0xd5, 0x9e, 0x7c, 0x61, 0xaf, 0x60, 0x19, 0xad, 0x49, 0xa5, 0x91, 0x8f,
	0xaf, 0xc9, 0x45, 0x88, 0x97, 0x18, 0xd8, 0x1e, 0xe4, 0x47, 0x91, 0xe3, 0x3a, 0x91, 0x23, 0xe2,
	0x7c, 0x71, 0x91, 0x75, 0x1c, 0xc7, 0x58, 0x12, 0x31, 0x63, 0x5d, 0xff, 0xbb, 0x2c, 0x14, 0x93,
	0xcb, 0xc3, 0xed, 0x93, 0x8a, 0x50, 0x91, 0x96, 0xf6, 0x37, 0x67, 0x16, 0x89, 0x58, 0x97, 0x34,
	0x3c, 0x7d, 0x24, 0x48, 0x78, 0x84, 0x91, 0x5b, 0x2c, 0x93, 0x05, 0x83, 0x48, 0xec, 0x13, 0x28,
	0x07, 0x62, 0xe0, 0x47, 0x18, 0x91, 0xe9, 0xd8, 0x52, 0x47, 0x54, 0x49, 0x52, 0xd5, 0xc1, 0x86,
	0xbe, 0x20, 0x25, 0xf5, 0xce, 0x44, 0xef, 0x9c, 0xb6, 0x31, 0xa7, 0x92, 0x87, 0x1a, 0x52, 0x28,
	0x23, 0xb0, 0xbc, 0x91, 0xe5, 0x72, 0xdb, 0xb1, 0x5c, 0x75, 0xcc, 0x80, 0x24, 0xd5, 0x1d, 0xcb,
	0x65, 0x0c, 0x96, 0x85, 0xed, 0x44, 0xea, 0x28, 0xa1, 0x67, 0xb4, 0xa6, 0x59, 0x08, 0x52, 0x47,
	0x47, 0x7e, 0x1a, 0x7d, 0x50, 0x66, 0x9c, 0x22, 0x9c, 0x8b, 0x89, 0x3a, 0x2d, 0x40, 0x91, 0xde,
	0x88, 0xc9, 0xfa, 0x19, 0x14, 0x12, 0xea, 0xc2, 0xb5, 0xf8, 0xa3, 0xa8, 0xef, 0xa3, 0x39, 0xd3,
	0xd4, 0xd4, 0xa6, 0x94, 0x62, 0x2a, 0xe5, 0x3d, 0xec, 0x01, 0xe4, 0x2c, 0x2f, 0x7c, 0x2f, 0x02,
	0x61, 0xab, 0x1d, 0x99, 0xbe, 0xb3, 0xbb, 0xb0, 0x32, 0x70, 0xc2, 0x50, 0xd8, 0x6a, 0x1b, 0xd4,
	0xdb, 0xfa, 0xd7, 0x90, 0x8b, 0x35, 0x8b, 0x66, 0x8d, 0xb3, 0xa7, 0xf4, 0x54, 0x7d, 0x21, 0x87,
	0x04, 0xcc, 0x3b, 0x71, 0x99, 0x64, 0x29, 0x52, 0x30, 0x3d, 0xaf, 0xff, 0xe3, 0x12, 0x94, 0xe6,
	0x34, 0xcb, 0xd6, 0xa1, 0x84, 0x01, 0x97, 0xfb, 0x81, 0x5a, 0xbb, 0x14, 0x53, 0x40, 0x62, 0x3b,
	0x90, 0xab, 0xff, 0x1d, 0x00, 0x1e, 0xec, 0x56, 0xe0, 0x8f, 0xbc, 0x78, 0xa2, 0x09, 0x0a, 0xd3,
	0x60, 0xe9, 0xc2, 0x1f, 0xab, 0x79, 0xe2, 0x23, 0xab, 0xc2, 0x6a, 0xf8, 0xe3, 0x48, 0xb8, 0xbd,
	0x33, 0xa5, 0xa0, 0xf8, 0x15, 0xad, 0xc5, 0x15, 0x36, 0x77, 0x3c, 0xdb, 0xe9, 0x59, 0xa8, 0x64,
	0xa9, 0x9f, 0xa2, 0x2b, 0xec, 0x46, 0x4c, 0x43, 0xd0, 0xb9, 0x98, 0x9c, 0xf8, 0x56, 0xa0, 0x22,
	0x9e, 0x54, 0x55, 0x31, 0x26, 0x52, 0xcc, 0xfb, 0x18, 0x8a, 0xc9, 0xc3, 0x56, 0x29, 0xad, 0x90,
	0x38, 0x3b, 0xd9, 0x6f, 0x21, 0x3f, 0x8d, 0xa5, 0x4a, 0x69, 0x33, 0x02, 0xbb, 0x0d, 0x37, 0x29,
	0x94, 0xa9, 0xd3, 0x5c, 0xbe, 0xe0, 0x62, 0x30, 0x5f, 0x06, 0xb9, 0x98, 0xfe, 0x30, 0xc4, 0xd9,
	0xc4, 0xca, 0x97, 0xba, 0x2c, 0xc8, 0xd9, 0x28, 0xa2, 0x54, 0xa5, 0x4c, 0xaf, 0x86, 0xae, 0x35,
	0x91, 0xf1, 0xb7, 0x38, 0x4d, 0xaf, 0x90, 0x36, 0x8d, 0xa9, 0x97, 0xb2, 0xa0, 0x92, 0xcc, 0x24,
	0x86, 0xf3, 0xe9, 0xcf, 0xfa, 0xdf, 0x67, 0xe1, 0x56, 0xdb, 0x13, 0x5d, 0x7f, 0xd4, 0x3b, 0xd3,
	0x7b, 0x3d, 0x11, 0x86, 0x86, 0x17, 0x05, 0x13, 0xf6, 0x15, 0x2c, 0x93, 0xf8, 0xcc, 0x2f, 0x49,
	0xcb, 0x88, 0x85, 0x1d, 0x00, 0x19, 0x74, 0x32, 0x91, 0x5c, 0x54, 0xd8, 0xc5, 0x5f, 0x47, 0xb3,
	0x26, 0x29, 0x14, 0xba, 0x28, 0x95, 0xfc, 0x04, 0xca, 0xf3, 0x55, 0x2d, 0xa9, 0xbe, 0x64, 0x96,
	0xe6, 0x2a, 0x55, 0xdc, 0x37, 0x15, 0xf9, 0x50, 0xdd, 0x62, 0x4c, 0xa6, 0x50, 0x32, 0x8b, 0x8a,
	0xd8, 0x40, 0x1a, 0xfb, 0x02, 0x18, 0x96, 0x29, 0x5c, 0x78, 0x38, 0x81, 0x58, 0xde, 0x4d, 0x79,
	0x10, 0xe2, 0x88, 0x41, 0x03, 0x52, 0xe4, 0xfa, 0xbf, 0xac, 0xc0, 0xda, 0xa5, 0xc2, 0x9b, 0x6d,
	0xc1, 0x2d, 0xd7, 0xc7, 0x83, 0x23, 0x10, 0x61, 0xc8, 0xed, 0x51, 0x30, 0x6b, 0x5d, 0x94, 0xcc,
	0x35, 0x1c, 0x42, 0xf6, 0xb0, 0xae, 0x06, 0xd8, 0x1b, 0x28, 0x86, 0x8e, 0x2d, 0x78, 0x78, 0xe6,
	0x07, 0x11, 0xdf, 0x51, 0x9b, 0xf1, 0xd9, 0xb5, 0xc5, 0xfe, 0xde, 0xc8, 0xeb, 0x51, 0x87, 0x03,
	0x90, 0xbd, 0x83, 0xdc, 0x3b, 0x29, 0x61, 0xbb, 0xb4, 0x15, 0xbf, 0x52, 0xd8, 0x2e, 0x6b, 0x40,
	0x81, 0x84, 0xd1, 0x72, 0x76, 0x54, 0xf2, 0xfd, 0x0b, 0x64, 0xe5, 0x91, 0xbb, 0xe9, 0x7b, 0xfd,
	0x9d, 0x79, 0x51, 0xbb, 0xb4, 0xa3, 0xbf, 0x4e, 0xd4, 0x2e, 0xfb, 0x0e, 0x34, 0x0c, 0x11, 0x11,
	0x9a, 0x03, 0xb7, 0xc8, 0x1a, 0xab, 0x2b, 0x8f, 0x96, 0x36, 0x0a, 0xbb, 0x5b, 0x1f, 0x60, 0x40,
	0x09, 0xf3, 0x35, 0xcb, 0xfe, 0x1c, 0x11, 0xa3, 0x4f, 0x6c, 0x22, 0xe7, 0x62, 0xc2, 0xb7, 0xab,
	0x36, 0xe9, 0xac, 0xa0, 0x88, 0x6f, 0xc4, 0x64, 0x3b, 0x8d, 0xd9, 0xa9, 0x8a, 0x34, 0x66, 0x27,
	0x8d, 0xd9, 0xad, 0x9e, 0xa6, 0x31, 0xbb, 0x69, 0xcc, 0xb3, 0x6a, 0x3f, 0x8d, 0x79, 0x96, 0xc6,
	0x3c, 0xaf, 0x9e, 0xa5, 0x31, 0xcf, 0xd3, 0x98, 0x17, 0x55, 0x27, 0x8d, 0x79, 0x91, 0xc6, 0xbc,
	0xac, 0xfe, 0x39, 0x8d, 0x79, 0x99, 0xc6, 0xbc, 0xaa, 0x9e, 0xa7, 0x31, 0xaf, 0xd2, 0x98, 0x2f,
	0xab, 0x6e, 0x1a, 0xf3, 0x65, 0x1a, 0xf3, 0x55, 0x75, 0x90, 0xc6, 0x7c, 0xb5, 0xfe, 0x05, 0x94,
	0xe7, 0xbb, 0x4a, 0x78, 0xf4, 0x4c, 0xf3, 0x1d, 0x59, 0x78, 0x4e, 0xdf, 0xd7, 0x8f, 0xa1, 0x92,
	0x6a, 0x17, 0xe1, 0xf9, 0x28, 0x7b, 0x83, 0xe7, 0x62, 0x22, 0x19, 0x8a, 0x18, 0x4a, 0x43, 0xa7,
	0xf7, 0x46, 0x4c, 0x28, 0x44, 0x0a, 0xef, 0xcc, 0xf2, 0x7a, 0xc2, 0x96, 0x88, 0x2c, 0x21, 0x8a,
	0x31, 0x11, 0x41, 0xeb, 0xff, 0x99, 0x85, 0xdb, 0xa9, 0x76, 0x91, 0x0c, 0x6a, 0x0f, 0xa1, 0x20,
	0x1b, 0x4e, 0xc9, 0xae, 0x02, 0x48, 0x12, 0xb5, 0x15, 0x28, 0x35, 0xb8, 0xc0, 0xe2, 0x40, 0xf5,
	0x44, 0xc8, 0x65, 0x4b, 0x98, 0x1a, 0x20, 0x55, 0xb5, 0x4c, 0x58, 0x0d, 0xc0, 0x72, 0xad, 0x60,
	0x20, 0x43, 0x9c, 0x74, 0xc4, 0x45, 0xcd, 0x07, 0x1d, 0xc1, 0x14, 0xdb, 0xf2, 0x56, 0xfc, 0x38,
	0x13, 0x42, 0x71, 0x76, 0xf9, 0xc3, 0x84, 0x50, 0x0a, 0x2d, 0x85, 0x50, 0xa8, 0xff, 0x0c, 0x34,
	0x67, 0x30, 0xf4, 0x5d, 0x27, 0xc2, 0x3a, 0x33, 0x0a, 0x30, 0xe7, 0x92, 0x31, 0xad, 0x12, 0xd3,
	0x4d, 0x49, 0xc6, 0xb5, 0xa5, 0x80, 0x2b, 0x72, 0x6d, 0xf3, 0xb0, 0x0d, 0xd0, 0xce, 0xfc, 0x88,
	0x0f, 0x9c, 0xde, 0x2c, 0xc0, 0xad, 0xca, 0x9a, 0xeb, 0xcc, 0x8f, 0x0e, 0x9d, 0x5e, 0x1c, 0xdd,
	0xd6, 0x7f, 0x5a, 0x02, 0x2d, 0xdd, 0x95, 0xc3, 0x42, 0x68, 0x2e, 0x49, 0xe3, 0xb6, 0xe8, 0xc5,
	0xe7, 0x48, 0xce, 0x64, 0xc9, 0x5c, 0xad, 0x4e, 0x23, 0x6c, 0x17, 0xee, 0xcc, 0xa7, 0x63, 0x31,
	0x8b, 0x3c, 0xff, 0x6f, 0xcd, 0x65, 0x65, 0x8a, 0xc7, 0x80, 0x87, 0xb3, 0x1e, 0xe2, 0xd5, 0xdc,
	0x32, 0x49, 0xf8, 0xed, 0x14, 0x66, 0x5e, 0x21, 0xe6, 0x25, 0xdc, 0x4b, 0x33, 0xc7, 0x4b, 0x96,
	0x47, 0xc8, 0x9d, 0xf9, 0x8f, 0xc7, 0x71, 0xfd, 0x09, 0x94, 0xa3, 0x31, 0x0f, 0x27, 0x5e, 0x8f,
	0xbf, 0xb7, 0xce, 0xc5, 0x68, 0xa8, 0xf6, 0xbc, 0x18, 0x8d, 0x3b, 0x13, 0xaf, 0xf7, 0x8e, 0x68,
	0xec, 0x05, 0xdc, 0x8b, 0xc6, 0x0a, 0x10, 0xe7, 0xfc, 0xdc, 0x75, 0x06, 0x2a, 0x23, 0x2c, 0x99,
	0xb7, 0xa3, 0xb1, 0x84, 0x2a, 0x97, 0x69, 0xe2, 0x18, 0x6b, 0xc0, 0xaa, 0xf0, 0xa4, 0x82, 0x56,
	0x29, 0xf6, 0x3d, 0xfd, 0xf0, 0xae, 0xa8, 0x0c, 0x7e, 0x31, 0xff, 0xfa, 0x3f, 0x64, 0xa6, 0x29,
	0xb4, 0x74, 0x80, 0x32, 0x64, 0x1d, 0x5b, 0x9d, 0x57, 0x59, 0xc7, 0xc6, 0xd4, 0x8d, 0x3c, 0x21,
	0x4b, 0x9e, 0x40, 0xcf, 0x98, 0x3d, 0xd0, 0xf1, 0x1d, 0xb7, 0x2d, 0xa8, 0x4c, 0x96, 0xbb, 0x49,
	0xd5, 0xb3, 0xea, 0x59, 0x50, 0xa1, 0xfc, 0x4d, 0xf2, 0xa8, 0x97, 0x26, 0xfc, 0xf8, 0x9a, 0x42,
	0x63, 0xfe, 0x88, 0x5f, 0x3f, 0x84, 0x5c, 0x6d, 0x56, 0xb5, 0x4c, 0x57, 0x9e, 0xa1, 0x95, 0x7f,
	0x40, 0xe5, 0x93, 0x5a, 0xf1, 0x3e, 0x14, 0x55, 0x57, 0x56, 0x2e, 0x38, 0x5e, 0x60, 0x26, 0xb1,
	0xc0, 0x4b, 0xe9, 0x02, 0xc6, 0x90, 0x54, 0xba, 0x80, 0xf3, 0x8a, 0xdb, 0xbb, 0xbf, 0x6c, 0x5e,
	0xc9, 0xcf, 0xcf, 0xe6, 0x55, 0x87, 0xfc, 0x0f, 0xbe, 0x27, 0x16, 0x4f, 0x4a, 0x46, 0x97, 0xd4,
	0xa4, 0x24, 0x51, 0x4e, 0x6a, 0x1f, 0x6e, 0x52, 0xd7, 0x98, 0xfd, 0xff, 0xf4, 0x8c, 0x9e, 0x5c,
	0xd3, 0x68, 0x4e, 0x4d, 0xe7, 0xa7, 0x2c, 0x94, 0xe2, 0x16, 0xf2, 0xcf, 0xcf, 0xe9, 0x0b, 0x60,
	0xc3, 0xc0, 0xf1, 0x03, 0x27, 0x9a, 0xc4, 0xf1, 0x50, 0x25, 0x31, 0x25, 0x53, 0x8b, 0x47, 0x54,
	0x4c, 0xdc, 0xb9, 0x12, 0xbd, 0xab, 0x12, 0xb6, 0x34, 0x7a, 0x17, 0xe3, 0x7c, 0x34, 0x9e, 0x46,
	0x59, 0xe9, 0x6d, 0xf9, 0x68, 0x1c, 0x47, 0xd8, 0x0d, 0xd0, 0x42, 0xa7, 0xef, 0x59, 0x2e, 0x3f,
	0xf3, 0x5d, 0x5b, 0x96, 0xd3, 0xd2, 0xc7, 0xca, 0x92, 0x7e, 0xe0, 0xbb, 0x36, 0x15, 0xd5, 0xdb,
	0x70, 0x7b, 0xfa, 0xd9, 0xd0, 0x1a, 0x0c, 0x5d, 0x21, 0xd1, 0xd2, 0xc5, 0xa6, 0x53, 0xea, 0xd0,
	0x50, 0x5c, 0x86, 0xcf, 0x6f, 0xf5, 0xea, 0x15, 0x5b, 0xdd, 0x86, 0xfc, 0xb4, 0xc7, 0xce, 0x5e,
	0xa7, 0xb7, 0x7b, 0xe3, 0x03, 0x5a, 0xf3, 0xa9, 0x2d, 0x0f, 0x61, 0x59, 0xb5, 0x2a, 0x97, 0xc9,
	0x5b, 0xae, 0x4f, 0xac, 0x11, 0x2e, 0xdd, 0xda, 0x24, 0x16, 0xac, 0x32, 0x4e, 0x03, 0xf1, 0xe3,
	0x08, 0xfd, 0x5d, 0xa9, 0x61, 0x46, 0x40, 0x0d, 0x4e, 0x03, 0x5f, 0xc9, 0xa4, 0xe7, 0xf5, 0xff,
	0xa9, 0x40, 0x51, 0x6d, 0xa9, 0x54, 0xf3, 0x1f, 0xe7, 0xd2, 0xfa, 0x4f, 0xaf, 0xbf, 0x1e, 0xa0,
	0x03, 0x47, 0xe6, 0xf5, 0xaf, 0xb1, 0xc8, 0xf1, 0xec, 0xf7, 0x8e, 0x1d, 0x9d, 0xa9, 0x54, 0xf6,
	0xc9, 0xc2, 0xeb, 0x3a, 0x85, 0x35, 0x67, 0x6c, 0x58, 0x48, 0x5a, 0xa3, 0x08, 0x4b, 0x29, 0xcb,
	0x53, 0x41, 0x25, 0x87, 0x04, 0xdc, 0x34, 0xf6, 0xa7, 0xf9, 0x62, 0xae, 0xbc, 0xbb, 0xbe, 0x68,
	0x9b, 0x25, 0x72, 0x56, 0xf0, 0x3d, 0x84, 0x42, 0xa2, 0x05, 0x17, 0x97, 0xe3, 0xb3, 0xce, 0x5b,
	0xaa, 0xba, 0x5c, 0xb9, 0x54, 0x5d, 0xde, 0x83, 0xd5, 0x60, 0xcc, 0x7d, 0xcf, 0x9d, 0xa8, 0x12,
	0x6f, 0x25, 0x18, 0xb7, 0x3d, 0x77, 0xc2, 0x9e, 0xc1, 0x72, 0xe8, 0xfa, 0xb2, 0xb0, 0x2b, 0xef,
	0x3e, 0x5c, 0x34, 0x29, 0xd7, 0x8f, 0x4c, 0x02, 0x53, 0xa1, 0xef, 0xbb, 0x7e, 0xc0, 0x49, 0x29,
	0x79, 0xa9, 0x2d, 0xa2, 0xd4, 0x70, 0x33, 0x7f, 0x03, 0x79, 0x4c, 0xa2, 0xa4, 0x01, 0x82, 0x6c,
	0x14, 0x9d, 0x8b, 0x89, 0xac, 0x55, 0xfe, 0x12, 0x8a, 0xf1, 0xcd, 0x1b, 0xd9, 0x4a, 0x81, 0x3e,
	0xbc, 0x30, 0x1a, 0x3a, 0xc3, 0x33, 0x11, 0x28, 0x6b, 0x29, 0x28, 0xe6, 0xb8, 0x1d, 0x9f, 0x6c,
	0xb7, 0xc6, 0xf5, 0x62, 0xa2, 0xd3, 0x4a, 0x37, 0x17, 0x56, 0x64, 0xc9, 0x71, 0x59, 0x27, 0xe6,
	0x90, 0x40, 0x83, 0xef, 0x40, 0x0b, 0xc6, 0x3c, 0x10, 0xa7, 0x7c, 0x66, 0x7b, 0x65, 0x9a, 0xcf,
	0x1f, 0x16, 0x45, 0x41, 0x71, 0x2a, 0x02, 0xe1, 0xf5, 0xc4, 0x5e, 0xcc, 0x64, 0x96, 0x83, 0xb1,
	0x29, 0x4e, 0xa7, 0xef, 0x58, 0x4c, 0xcd, 0xce, 0x70, 0x99, 0x09, 0x59, 0xbd, 0x73, 0xea, 0xef,
	0xe6, 0xcc, 0xd9, 0x15, 0x21, 0xa5, 0x3d, 0x7a, 0xef, 0x9c, 0x7d, 0x0d, 0x0f, 0x7a, 0xfe, 0x80,
	0x4a, 0x2f, 0x61, 0xf3, 0x91, 0x3d, 0xe4, 0x34, 0xe9, 0x33, 0x61, 0xd9, 0x22, 0xa0, 0x76, 0x6f,
	0xce, 0xbc, 0x37, 0x43, 0x1c, 0xdb, 0xc3, 0xba, 0x15, 0x59, 0x07, 0x34, 0x8c, 0x27, 0x76, 0x5c,
	0x35, 0x0f, 0xa3, 0x88, 0x3b, 0x36, 0x35, 0x7e, 0x65, 0xd7, 0x1e, 0xa9, 0x47, 0x51, 0xd4, 0xb0,
	0x71, 0xad, 0x51, 0x7a, 0xad, 0xec, 0x57, 0xad, 0x35, 0x9a, 0x5f, 0xeb, 0x63, 0x90, 0x19, 0x64,
	0x28, 0xf8, 0xc9, 0x28, 0x08, 0x23, 0xea, 0x0b, 0xe7, 0xcc, 0xa2, 0x22, 0xbe, 0x46, 0x1a, 0x5a,
	0xcc, 0x8f, 0x11, 0x57, 0x24, 0xea, 0x02, 0xe7, 0xcc, 0xfc, 0x8f, 0x91, 0x29, 0x09, 0x71, 0xf3,
	0xe3, 0xce, 0xac, 0xf9, 0xf1, 0xff, 0xe2, 0xbe, 0xc2, 0xdd, 0x6b, 0xed, 0xe3, 0x08, 0x71, 0x2a,
	0xc9, 0x8e, 0x1b, 0x10, 0x6d, 0x28, 0x5b, 0xf6, 0xc0, 0x89, 0x78, 0x2f, 0x70, 0x22, 0x11, 0x38,
	0xd6, 0x07, 0xf4, 0x72, 0x75, 0x64, 0xa8, 0x29, 0xbc, 0x59, 0xb2, 0x92, 0xaf, 0xac, 0x0a, 0xab,
	0xea, 0x0c, 0x55, 0x1d, 0xdc, 0xf8, 0x15, 0xe7, 0x1e, 0xf9, 0x91, 0x6a, 0xd1, 0xe2, 0x23, 0xfb,
	0x14, 0x2a, 0x91, 0x8f, 0xab, 0x45, 0x2f, 0xb0, 0x85, 0x6b, 0x4d, 0xa8, 0x0b, 0x5b, 0x32, 0x4b,
	0x91, 0x1f, 0x99, 0x48, 0xad, 0x23, 0x11, 0x13, 0xdc, 0xf4, 0x6d, 0x31, 0xf5, 0x60, 0x4b, 0x66,
	0x25, 0x75, 0xff, 0x8b, 0x66, 0x3c, 0xbd, 0x43, 0x55, 0x1d, 0xee, 0x5c, 0x7c, 0x39, 0x4a, 0x37,
	0x1b, 0xea, 0x6a, 0xb7, 0xfa, 0x91, 0xba, 0xd9, 0x90, 0x27, 0x35, 0xb5, 0x0c, 0xc7, 0x09, 0x8d,
	0xff, 0xee, 0x51, 0x66, 0x63, 0xd9, 0x2c, 0x04, 0xe3, 0x99, 0xfe, 0x3e, 0x86, 0x62, 0x94, 0x84,
	0x3c, 0x94, 0x90, 0x28, 0x01, 0xa9, 0x43, 0x89, 0x32, 0x4f, 0xc7, 0xeb, 0xcb, 0x94, 0xe9, 0x11,
	0xb5, 0x3e, 0x1f, 0x5e, 0x13, 0xe0, 0xcd, 0x62, 0xcc, 0x45, 0xa7, 0x43, 0x1d, 0xeb, 0x9b, 0xa4,
	0x94, 0x8f, 0x3f, 0x50, 0x4a, 0xcc, 0x45, 0x52, 0x0e, 0x69, 0x45, 0xf2, 0xa0, 0x74, 0xbc, 0x7e,
	0x75, 0xfd, 0xda, 0x9b, 0xa1, 0x4e, 0x8c, 0x8d, 0x43, 0x48, 0x30, 0x9e, 0x92, 0x50, 0x5c, 0x94,
	0x14, 0xf7, 0xf8, 0x97, 0x8b, 0x8b, 0x12, 0xe2, 0xe2, 0x54, 0xe3, 0x49, 0x22, 0xd5, 0x50, 0xcd,
	0xb0, 0x4f, 0xa4, 0x81, 0xf4, 0x87, 0x21, 0x1a, 0x88, 0xba, 0xe5, 0x90, 0x09, 0xbd, 0xaa, 0xc7,
	0x73, 0x66, 0x49, 0x92, 0x65, 0x0a, 0xbf, 0x73, 0x19, 0x27, 0x6b, 0xf2, 0x14, 0x6e, 0xf7, 0x32,
	0x4e, 0xd6, 0xe5, 0x29, 0xdc, 0xb3, 0xcb, 0x38, 0x59, 0x9b, 0xa7, 0x70, 0xcf, 0x2f, 0xe3, 0x64,
	0x7d, 0x9e, 0xc2, 0xbd, 0xb8, 0x8c, 0x93, 0x35, 0x7a, 0x0a, 0xf7, 0xf2, 0x32, 0x4e, 0xd6, 0xe9,
	0x29, 0xdc, 0xab, 0xcb, 0x38, 0x59, 0xab, 0xa7, 0x70, 0x5f, 0x52, 0x62, 0x1d, 0xdf, 0xeb, 0xff,
	0xb2, 0xc4, 0x3a, 0x91, 0x2f, 0xcc, 0xd2, 0x97, 0xff, 0x58, 0x86, 0x0a, 0x5d, 0xfa, 0x27, 0xca,
	0xe9, 0x4d, 0x58, 0x3b, 0x75, 0x82, 0x30, 0x92, 0x77, 0x58, 0xca, 0x8b, 0x65, 0x71, 0x51, 0xa1,
	0x01, 0xba, 0xbe, 0x92, 0x7e, 0xbc, 0x01, 0x5a, 0x12, 0x4b, 0x29, 0x9a, 0x4c, 0x61, 0xca, 0x33,
	0x28, 0xa5, 0x67, 0x5b, 0x70, 0x4b, 0xc9, 0x53, 0xe5, 0x96, 0x04, 0xcb, 0xb4, 0x66, 0x8d, 0x86,
	0xe2, 0x42, 0x6c, 0x1e, 0xef, 0x78, 0x91, 0x08, 0x2e, 0x2c, 0x57, 0xe2, 0x97, 0x13, 0xf8, 0x86,
	0x1a, 0x21, 0xfc, 0x53, 0xb8, 0x1d, 0x46, 0x56, 0xc0, 0xcf, 0xac, 0xf0, 0x2c, 0x39, 0x1b, 0x99,
	0x30, 0xae, 0xe1, 0xd8, 0x81, 0x15, 0x9e, 0xcd, 0x26, 0xb4, 0x01, 0x1a, 0x35, 0x1b, 0xb8, 0x15,
	0xa2, 0x0f, 0x0c, 0x84, 0x17, 0xc5, 0x15, 0xb1, 0xfd, 0x46, 0x4c, 0xf4, 0x29, 0x15, 0xc3, 0xbc,
	0x27, 0xc6, 0x11, 0x0f, 0x65, 0x50, 0x90, 0xb7, 0xbd, 0x25, 0xb3, 0x88, 0xc4, 0x8e, 0xa2, 0x91,
	0x02, 0x31, 0x05, 0xa2, 0xfe, 0x88, 0xfc, 0xb4, 0xcc, 0x0e, 0x4a, 0x48, 0x36, 0x91, 0x4a, 0x9f,
	0xc5, 0x70, 0xe6, 0xd8, 0xaa, 0xfe, 0x92, 0x5d, 0xe2, 0x1c, 0x12, 0xc8, 0xc3, 0xbf, 0x86, 0x15,
	0x75, 0x8e, 0x15, 0xae, 0x4d, 0xc4, 0xe8, 0x6c, 0xa3, 0xb2, 0xeb, 0xe6, 0x90, 0x8e, 0xb9, 0x7d,
	0x00, 0x75, 0x53, 0x1b, 0x37, 0x90, 0x17, 0x07, 0x7d, 0x0a, 0x93, 0x98, 0xb5, 0xc8, 0x16, 0x46,
	0x3f, 0x7e, 0x65, 0xeb, 0xd4, 0x3e, 0xe7, 0xa3, 0xa1, 0xea, 0xaa, 0x52, 0xf2, 0x90, 0x37, 0x0b,
	0xe7, 0x62, 0x72, 0x3c, 0x94, 0xfd, 0x54, 0x5c, 0x2e, 0x85, 0x78, 0xff, 0xbd, 0x17, 0xa3, 0xca,
	0x84, 0x42, 0xd6, 0xba, 0xff, 0xde, 0x93, 0xb8, 0xf5, 0x7f, 0xcd, 0x4a, 0x03, 0x93, 0xf6, 0x2b,
	0x0d, 0xec, 0x1e, 0xac, 0x52, 0xcf, 0x56, 0xd5, 0xac, 0x79, 0x73, 0x05, 0x5f, 0x1b, 0x36, 0x6b,
	0xe2, 0x79, 0x2a, 0xaf, 0x5e, 0x93, 0x6d, 0xe6, 0x85, 0x75, 0x99, 0xc2, 0xd3, 0x1a, 0x8a, 0x41,
	0xe2, 0x8d, 0xed, 0x41, 0x41, 0xf9, 0x52, 0xa2, 0x9f, 0xb3, 0x28, 0x33, 0x97, 0x73, 0x24, 0x49,
	0x60, 0x4f, 0x9f, 0xd1, 0x50, 0xac, 0xde, 0x79, 0xdc, 0x61, 0x4e, 0xb6, 0xa2, 0xcb, 0x56, 0xef,
	0x5c, 0xae, 0x53, 0x26, 0x78, 0x4f, 0x00, 0x29, 0xd2, 0x63, 0x92, 0xc5, 0x4d, 0xd1, 0xea, 0x9d,
	0x93, 0xbf, 0xc4, 0xa5, 0xcd, 0x7c, 0x37, 0x4a, 0xc9, 0x54, 0xa5, 0xcd, 0x5c, 0x4f, 0x4a, 0x56,
	0x2d, 0xff, 0x9c, 0x81, 0x62, 0xf2, 0xaf, 0x39, 0xac, 0x0e, 0xab, 0xf1, 0x5f, 0xac, 0xa4, 0xe7,
	0x6f, 0x5e, 0xf7, 0xa7, 0x9e, 0x64, 0x1f, 0x41, 0xb1, 0xe2, 0xc1, 0x2e, 0x17, 0x25, 0xfb, 0x6d,
	0x79, 0x33, 0x7e, 0x45, 0xf9, 0x72, 0x03, 0xc2, 0xea, 0xd2, 0x07, 0xc9, 0x4f, 0xa8, 0xd7, 0x8c,
	0x59, 0xd7, 0xff, 0x29, 0x03, 0xe5, 0xe9, 0xbf, 0x82, 0xa4, 0xea, 0x7f, 0x6e, 0xed, 0x99, 0x9f,
	0x5b, 0x3b, 0xfb, 0x3d, 0x54, 0x02, 0x31, 0xf4, 0x83, 0x59, 0x20, 0x88, 0x03, 0x8c, 0x24, 0xc7,
	0x41, 0x80, 0xfd, 0x11, 0xee, 0xdb, 0x22, 0x8c, 0x1c, 0x4f, 0x46, 0x97, 0xf9, 0x5e, 0x80, 0x0c,
	0x33, 0xf7, 0x12, 0x80, 0x5a, 0xb2, 0x2d, 0xf0, 0x2d, 0xc0, 0xec, 0xef, 0x4b, 0xac, 0x96, 0x8e,
	0xab, 0x9f, 0x7d, 0xc8, 0xdf, 0x9e, 0xe6, 0x23, 0xeb, 0xe6, 0xdf, 0x40, 0x7e, 0xfa, 0xe7, 0x24,
	0x56, 0x81, 0xc2, 0xdb, 0x83, 0x3d, 0xbe, 0xf3, 0xec, 0x25, 0xdf, 0x79, 0xf5, 0x5c, 0xbb, 0x81,
	0x84, 0xe3, 0x83, 0x3d, 0xfe, 0xec, 0xc5, 0x36, 0x7f, 0xbe, 0xbd, 0xad, 0x65, 0x62, 0xc2, 0xf3,
	0xed, 0x6d, 0xfe, 0xfc, 0xcb, 0x6d, 0x2d, 0x3b, 0x25, 0xbc, 0xd8, 0xe6, 0x2f, 0x76, 0xb7, 0xb5,
	0x25, 0x56, 0x82, 0x5c, 0xbd, 0xd1, 0xd1, 0x5f, 0x37, 0x8d, 0xba, 0xf6, 0xbf, 0x99, 0xcd, 0xcf,
	0xa1, 0x90, 0xf8, 0xaf, 0x0e, 0x03, 0x58, 0xe9, 0x34, 0x9a, 0x46, 0xab, 0xab, 0xdd, 0x60, 0x1a,
	0x14, 0xdb, 0x47, 0x46, 0x8b, 0x77, 0xbe, 0x3d, 0x36, 0x9a, 0xb5, 0x03, 0x2d, 0xb3, 0xf9, 0x15,
	0xc0, 0xec, 0x3e, 0x87, 0xe5, 0x60, 0xb9, 0xd5, 0x6e, 0x19, 0xda, 0x0d, 0x56, 0x80, 0xd5, 0x7a,
	0x63, 0xbf, 0xd1, 0xd5, 0x9b, 0x5a, 0x06, 0x45, 0xe8, 0x2d, 0xbd, 0xd9, 0xde, 0xd7, 0xb2, 0x08,
	0x79, 0xdd, 0xee, 0x1e, 0x68, 0x4b, 0x9b, 0x4f, 0xa1, 0x92, 0xfa, 0x7f, 0x09, 0x4e, 0xad, 0x76,
	0xa0, 0x9b, 0xbc, 0xd3, 0x35, 0x1b, 0xad, 0x7d, 0x29, 0xe6, 0xa8, 0x51, 0xeb, 0x1e, 0x9b, 0x86,
	0x96, 0xd9, 0xfc, 0x04, 0x4a, 0x73, 0x7f, 0x0d, 0x60, 0x2b, 0x90, 0x3d, 0x34, 0xb5, 0x1b, 0xac,
	0x08, 0xab, 0xb5, 0x03, 0xbd, 0xd5, 0x32, 0x9a, 0x38, 0xff, 0xff, 0x5a, 0x82, 0xf2, 0xfc, 0x95,
	0x01, 0x2b, 0x03, 0x1c, 0xb7, 0xf4, 0x4e, 0xa7, 0xb1, 0xdf, 0x32, 0xea, 0xda, 0x0d, 0x76, 0x1f,
	0xee, 0xe8, 0xcd, 0x26, 0xd7, 0x9b, 0x86, 0xd9, 0xe5, 0xdd, 0x76, 0xcb, 0xe8, 0xf0, 0x76, 0xab,
	0xbd, 0xb7, 0xa7, 0x65, 0x70, 0x89, 0xc6, 0xa1, 0x61, 0xee, 0x1b, 0xad, 0xda, 0xf7, 0xbc, 0xdd,
	0xd2, 0xb2, 0x6c, 0x0d, 0x4a, 0x09, 0xca, 0xde, 0x9e, 0xb6, 0xc4, 0x18, 0x94, 0x0f, 0x1a, 0xfb,
	0x07, 0xbc, 0xd9, 0x7e, 0xc7, 0x8f, 0xda, 0xef, 0x0c, 0x53, 0x5b, 0xc6, 0xa9, 0x1e, 0xb6, 0x5b,
	0x8d, 0x6e, 0xdb, 0xd4, 0x6e, 0xb2, 0x5b, 0x50, 0x69, 0x1d, 0x37, 0x3a, 0x7a, 0xab, 0x66, 0xf0,
	0xba, 0xd1, 0x34, 0xba, 0x86, 0xb6, 0xc2, 0xee, 0x02, 0x6b, 0xb7, 0x0c, 0xde, 0x6d, 0x1f, 0xd7,
	0x0e, 0xb8, 0x5e, 0xab, 0x19, 0x9d, 0x0e, 0xdf, 0xd1, 0x56, 0xaf, 0xa4, 0xef, 0x6a, 0xb9, 0x2b,
	0xe9, 0xcf, 0xb4, 0xfc, 0x95, 0xf4, 0xe7, 0x1a, 0x5c, 0x49, 0x7f, 0xa1, 0x15, 0xae, 0xa4, 0xbf,
	0xd4, 0x8a, 0xec, 0x1e, 0xdc, 0x32, 0x8d, 0x23, 0x43, 0xef, 0x1a, 0x26, 0xef, 0xea, 0xcd, 0x37,
	0xba, 0xd9, 0x3e, 0x6e, 0xd5, 0xb5, 0x12, 0x6e, 0x57, 0xa7, 0xa6, 0xb7, 0xd4, 0x9e, 0x94, 0x59,
	0x15, 0x6e, 0x77, 0x1b, 0xfb, 0x07, 0x5d, 0xde, 0x6a, 0x9b, 0x87, 0x7a, 0x73, 0xaa, 0xfe, 0x3b,
	0xb8, 0x37, 0x47, 0x66, 0xe3, 0xad, 0x4e, 0x7b, 0x85, 0xe0, 0xbb, 0xac, 0x04, 0xf9, 0xb7, 0xed,
	0xef, 0xd4, 0xeb, 0x3d, 0x54, 0xe9, 0x0f, 0xf2, 0xeb, 0xfb, 0xfb, 0x4d, 0x43, 0xbb, 0xcf, 0xee,
	0xc0, 0xda, 0x6b, 0xbd, 0xdb, 0x35, 0xcc, 0xef, 0x79, 0xa3, 0x55, 0x6f, 0xd4, 0x74, 0xdc, 0xb1,
	0x07, 0x88, 0x3b, 0xd4, 0x5b, 0xc7, 0x7a, 0x93, 0xd7, 0x1b, 0x7a, 0x53, 0xfb, 0x1d, 0x6e, 0x61,
	0x13, 0x19, 0xdf, 0xb5, 0xcd, 0x37, 0x4a, 0xda, 0x43, 0x44, 0xa1, 0xba, 0xf8, 0xce, 0xab, 0x17,
	0xdb, 0x07, 0x3f, 0x68, 0x9f, 0x6e, 0xba, 0xa0, 0xa5, 0xef, 0x03, 0x51, 0x85, 0xad, 0x36, 0xaf,
	0xa1, 0x86, 0xbb, 0xdf, 0x1f, 0xa1, 0x35, 0xe6, 0xe1, 0x26, 0xc6, 0x92, 0x1d, 0x2d, 0x13, 0x3f,
	0xee, 0x6a, 0xd9, 0xf8, 0xf1, 0x99, 0xb6, 0x14, 0x3f, 0x3e, 0xd7, 0x96, 0xd1, 0x40, 0x91, 0x55,
	0x23, 0x39, 0x5d, 0xe3, 0xbb, 0x2e, 0x3f, 0x34, 0x3a, 0x1d, 0x7d, 0xdf, 0xd0, 0x4e, 0x37, 0xff,
	0x1a, 0xf2, 0xd3, 0xd6, 0x3c, 0xae, 0x3d, 0x76, 0x9b, 0xf8, 0x3b, 0x1a, 0x14, 0x4d, 0x63, 0xff,
	0xb8, 0xa9, 0x9b, 0x92, 0x42, 0xde, 0x27, 0xbd, 0x47, 0x12, 0xb2, 0xec, 0x01, 0xdc, 0x55, 0x84,
	0x77, 0x8d, 0xee, 0x01, 0x7f, 0xdb, 0x6e, 0xd4, 0x0c, 0x39, 0xb6, 0xb4, 0xe9, 0x28, 0xf1, 0x64,
	0xdc, 0xb7, 0xa0, 0x32, 0x33, 0x3b, 0xbd, 0xa9, 0x9b, 0x87, 0xda, 0x0d, 0xf6, 0x11, 0xdc, 0x4f,
	0x11, 0xa5, 0x18, 0x9a, 0x71, 0x86, 0x6d, 0xc0, 0x93, 0x2b, 0x87, 0xd5, 0x57, 0xda, 0x7c, 0xaf,
	0xdd, 0x6c, 0xb6, 0xdf, 0x69, 0xd9, 0xcd, 0x6f, 0x21, 0x37, 0xdd, 0xaf, 0x3b, 0xb0, 0x36, 0xdd,
	0x2c, 0xde, 0x6a, 0x77, 0x79, 0xc7, 0x40, 0x67, 0x2f, 0x03, 0xec, 0x9b, 0xed, 0xe3, 0xa3, 0x58,
	0xb8, 0x06, 0x45, 0xd2, 0x75, 0xd7, 0x90, 0x94, 0x2c, 0x2b, 0x42, 0x0e, 0xf9, 0xe8, 0x6d, 0x69,
	0xb3, 0x01, 0x85, 0x44, 0x0f, 0x08, 0xb7, 0xe7, 0xb8, 0xd5, 0x31, 0xba, 0x3c, 0x76, 0xcd, 0x1b,
	0xe8, 0x36, 0x32, 0x0e, 0x4c, 0x69, 0x19, 0x5c, 0xa6, 0x0a, 0x14, 0x53, 0x62, 0x76, 0xf3, 0x63,
	0xc8, 0x4f, 0xbb, 0x41, 0x18, 0x3d, 0x5a, 0xba, 0x69, 0xb6, 0xdf, 0x69, 0x37, 0x50, 0x39, 0xef,
	0x1a, 0x75, 0x0c, 0x06, 0x8f, 0x60, 0x55, 0x75, 0x74, 0x50, 0x79, 0x64, 0x9e, 0xda, 0x0d, 0xc2,
	0x92, 0x8d, 0x6a, 0x99, 0xcd, 0x6f, 0x60, 0xb9, 0xe3, 0xfa, 0x58, 0x4b, 0x16, 0x3b, 0xcd, 0x76,
	0x97, 0x37, 0x5a, 0x6f, 0xf5, 0x66, 0xa3, 0x2e, 0xcd, 0x01, 0x29, 0xca, 0x1c, 0xf0, 0x11, 0xcd,
	0x21, 0xc6, 0xc5, 0x3b, 0xb0, 0xb4, 0xb9, 0x0f, 0xc5, 0x64, 0x9f, 0x04, 0x11, 0x6a, 0x49, 0x8d,
	0xa3, 0x03, 0xc3, 0x94, 0x0a, 0x7f, 0xad, 0x77, 0x1a, 0xb5, 0x98, 0x42, 0xeb, 0x31, 0x5a, 0x07,
	0xe8, 0xf8, 0xf5, 0x98, 0x88, 0xbb, 0xcd, 0x2e, 0x17, 0xfd, 0xb8, 0x43, 0x18, 0x40, 0x4c, 0x63,
	0xcf, 0x30, 0x8d, 0x56, 0x0d, 0x0d, 0xe8, 0x36, 0x68, 0x87, 0x46, 0xbd, 0x71, 0x7c, 0x98, 0xa0,
	0x66, 0xa6, 0xe1, 0x66, 0x46, 0xcb, 0x6e, 0xfe, 0x01, 0x8a, 0xc9, 0x1a, 0x1d, 0xdd, 0x6e, 0x16,
	0x8d, 0x48, 0x79, 0xc4, 0x22, 0xdf, 0x33, 0x9b, 0x35, 0x28, 0xcd, 0x95, 0xe2, 0x38, 0x73, 0xbd,
	0x7e, 0xd8, 0xe8, 0x72, 0xbd, 0xf9, 0x4e, 0xff, 0xbe, 0x23, 0xd7, 0xa2, 0x34, 0xc0, 0xf7, 0x4c,
	0x03, 0xbf, 0x5b, 0x06, 0xa8, 0xb5, 0x9b, 0x6d, 0x93, 0xd7, 0xda, 0x75, 0xfc, 0x66, 0x07, 0x2a,
	0xa9, 0x42, 0x4d, 0xf9, 0x1a, 0x06, 0x56, 0xbd, 0x29, 0x43, 0x36, 0xc0, 0x0a, 0xba, 0x12, 0xdf,
	0x91, 0x81, 0x9f, 0x9e, 0x71, 0x7b, 0xe3, 0x67, 0x74, 0xb7, 0xf8, 0xf9, 0xb9, 0xb6, 0xbc, 0xb9,
	0x07, 0x30, 0x6b, 0x5c, 0x62, 0x14, 0x6d, 0xb5, 0x29, 0x24, 0x4b, 0x3d, 0xd5, 0xba, 0xb5, 0x4e,
	0x47, 0x4e, 0xa5, 0x5e, 0xeb, 0xa8, 0x00, 0x24, 0x95, 0x85, 0xef, 0x8d, 0xd6, 0x5b, 0xc3, 0xec,
	0x1a, 0x75, 0xa9, 0xac, 0x64, 0xca, 0x86, 0x92, 0xf6, 0x8d, 0x96, 0x61, 0xea, 0x4d, 0x69, 0x37,
	0x6f, 0x1a, 0x64, 0xc5, 0x39, 0x58, 0xee, 0x74, 0x8f, 0x5b, 0x72, 0x42, 0x7a, 0xad, 0xdb, 0x78,
	0x6b, 0xc8, 0x09, 0x1d, 0xb7, 0x88, 0xbe, 0xbc, 0xb9, 0x0d, 0x30, 0xcb, 0xd7, 0x50, 0x23, 0x75,
	0x03, 0xd7, 0x1f, 0xbb, 0x07, 0xcd, 0xac, 0x08, 0xb9, 0x8e, 0xa1, 0x2c, 0x3f, 0xb3, 0xd9, 0x80,
	0xfc, 0x34, 0x67, 0x46, 0x45, 0xb4, 0xda, 0xfc, 0xa8, 0xdb, 0xe5, 0x64, 0x6b, 0x45, 0xc8, 0x1d,
	0x99, 0x06, 0x6f, 0xb7, 0x9a, 0xdf, 0x6b, 0x19, 0x1c, 0x3c, 0x6a, 0x77, 0xba, 0xf2, 0x35, 0x2b,
	0x5d, 0xca, 0xe0, 0x7a, 0xab, 0xce, 0x91, 0xac, 0x2d, 0x6d, 0x9a, 0x50, 0x9a, 0xcb, 0x9e, 0xd1,
	0x48, 0x5a, 0x6d, 0xae, 0x1c, 0x11, 0xd5, 0x70, 0x83, 0xdd, 0x84, 0x8c, 0xae, 0x65, 0xf0, 0xe7,
	0xb5, 0x96, 0xc5, 0x9f, 0x9a, 0xb6, 0x84, 0x3f, 0x75, 0x19, 0xbd, 0x3a, 0x5d, 0x1d, 0x8f, 0xa0,
	0x1c, 0x2c, 0x1f, 0xe8, 0x9d, 0x03, 0x6d, 0xe5, 0x64, 0x85, 0xfe, 0x28, 0xfc, 0xec, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf3, 0x07, 0x2e, 0x67, 0xb1, 0x31, 0x00, 0x00,
}
